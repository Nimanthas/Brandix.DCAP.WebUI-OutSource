#pragma checksum "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "76322313f7c7312196095a4cd0aa27e91d6232b6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Barcode), @"mvc.1.0.view", @"/Views/Home/Barcode.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Barcode.cshtml", typeof(AspNetCore.Views_Home_Barcode))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\_ViewImports.cshtml"
using Brandix.DCAP.WebUI;

#line default
#line hidden
#line 2 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\_ViewImports.cshtml"
using Brandix.DCAP.WebUI.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"76322313f7c7312196095a4cd0aa27e91d6232b6", @"/Views/Home/Barcode.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d6ac14fb493c2990ba4a5667bd32d8705427078c", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Barcode : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
  
Layout = "_Layout";

#line default
#line hidden
            BeginContext(28, 16992, true);
            WriteLiteral(@"<script type=""text/javascript"">
    //Declare variable for Models and status
    var isValidClient = Answer.Null;
    var clientconfig = null;
    var userPermissionList = null;   
    var selectedScanOption = ScanOption.Non;
    var selectedTrxMode = TransactionMode.Non;
    var selectedScanAction = Action.Non;
    var selectedFunction = Answer.Null;
    var scannedCount = 0; 
    var scannedStatus = ScannedStatus.Non;
    var isScanCompleted = false; 
    var clientIP = null; 
    var txUser = null;   
    var styleDataSource = null;
    var selectedStyle = null;
    var selectedColor = null; 
    var selectedScrapReason = null;
    var selectedDefectOpp = null;
    var selectedWfConfig = null;      
    var selectedStyleNo = null;
    var selectedStyleDesc = null;
    var selectedScanCounterId = null;
    var selectedSheduleNo = null;

    // var selectedScanCounterPO = null;    
    // var selectedScanCounterVal = null; 

    var wfid = null;
    var goodQty = 0;
    var scra");
            WriteLiteral(@"pQty = 0;
    var reworkQty = 0;
    var flag = true;

    var styleSearchGrid = null;
    var styleSearchWindow = null;
    var scrapReasonSearchGrid = null;
    var scrapReasonSearchWindow = null;
    var poCounterResetWindow = null;
    var colorSearchWindow = null;
    var colorSearchGrid = null;
    var scannedBarcode = null;
    var POCounters = null;
    var isValidBarcode = false;  
    var WFDEPInstId = 0;

    var ScanDataBackup = null;

    var sacanComplete = true;
    var errorbeforestauscomplete = null;

    var runningPOCounters = [];
    var lastUpdatedCounterId = null;
    var haltsystem = false;

    var previoushour = null;

    //Page Load Event
    $(document).ready(function () {
        refreshmsgBoxHeaderStyle();
        EnableControllers();
        sacanComplete = true;
        errorbeforestauscomplete = '';

        $('#styleSearchBtn').focus();
        $(""#sitebody"").append(
            '<div id=""ajaxBusy"" class=""ajaxBusy""></div>'
        );
    ");
            WriteLiteral(@"    $(""#ajaxBusy"").hide();

        $(document.body).keydown(function (e) {
            if (e.altKey && e.keyCode == 87) {
                $('#styleSearchGrid').data(""kendoGrid"").table.focus();
            }
        });

        $(document).on('keydown', disableFunctionKeys);
        (function blink() {
            $('.blinktext').fadeOut(150).fadeIn(150, blink);
        })();
        $('#pageTitleBar').html('<i class=""fas fa-barcode pageMainIcon""></i><span class=""pageTitle"">DCap - Barcode Scan</span>');

        initializeControlEvents();
        getSessionInfo();
        checkLoginStatus();
        setClientConfigInfo();
        checkIdle();
        setPageControlsStartupStatus();
        initializeFunctionKeys();
        populatePermissionList();

        //Enable barcode scan in the begging
        //$(""#barcodeBcodeTxt"").removeAttr(""disabled""); 
        //$(""#barcodeBcodeTxt"").focus();

        $(""#ddlMainOperation"").data(""kendoDropDownList"").dataSource.data([]);        
     ");
            WriteLiteral(@"   getOperation();
        setMainOperationVisibility();
        $('#sitebody').removeClass('body-login');
        if (isValidClient == Answer.Null) {
            window.location.href = ""Login"";
        }
        else if (isValidClient != Answer.Null && clientconfig.dataCaptureMode != DataCaptureMode.Barcode) {
            msgBox.show('මෙම යන්ත්‍රයට බාර්කෝඩ් ස්කෑන් කිරීම සඳහා අවසර නැත.', 'This device is not authorized for Bar-code Scan.', 'අවවාදයයි / Warning', 'BS01', 'Warning', function () {
                if (clientconfig.dataCaptureMode == DataCaptureMode.Bulk) {
                    window.location.href = ""Barcode"";
                }
            });
        }
    });

    function disableFunctionKeys(e) {
        var functionKeys = new Array(112, 113, 114, 115, 117, 118, 119, 120, 121);
        if (functionKeys.indexOf(e.keyCode) > -1 || functionKeys.indexOf(e.which) > -1) {
            e.preventDefault();
        }
    }

    function checkLoginStatus() {
        //console.log('Cal");
            WriteLiteral(@"led checkLoginStatus method. IsSignedIn = ' + sessionStorage.getItem(""IsSignedIn""));
        if (sessionStorage.getItem(""UserId"") != """") {
            $(""#toolBarLoggedinUser"").html(sessionStorage.getItem(""UserId""));
        } else {
            $(""#toolBarLoggedinUser"").html("""");
        }
        if (sessionStorage.getItem(""IsSignedIn"") == Answer.Null || sessionStorage.getItem(""IsSignedIn"") == Answer.No) {
            $(""#loginBar"").hide();
            window.location.href = ""Login"";
        } else {
            $(""#loginBar"").show();
        }
    }

    function initializeFunctionKeys() {
        shortcut.add(""F1"", function () {

            if (selectedScanOption == ScanOption.After && isValidBarcode && (selectedTrxMode == TransactionMode.Good || selectedTrxMode == 0)) {
                selectTrxModeGood();
                updateBarcodeScan();
            }
            else if (selectedScanOption == ScanOption.Continue) {
                if (selectedScrapReason != null && selectedTr");
            WriteLiteral(@"xMode != null && selectedTrxMode == TransactionMode.Scrap) {
                    return;
                }
                selectTrxModeGood();
                $(""#barcodeBcodeTxt"").focus();
            }
        });
        shortcut.add(""F2"", function () {

            if (selectedScanOption == ScanOption.After && isValidBarcode && (selectedTrxMode == TransactionMode.Scrap || selectedTrxMode == 0)) {
                selectTrxModeScrap();
                updateBarcodeScan();
            }
            else if (selectedScanOption == ScanOption.Continue) {
                selectTrxModeScrap();
                $(""#barcodeBcodeTxt"").focus();
                if ($(""#barcodeBcodeTxt"").val() != """" && selectedScanAction != Action.Reverse) {
                    checkBarcodeIsValid();
                }
            }

        });
        shortcut.add(""F3"", function () {

            if (selectedScanOption == ScanOption.After && isValidBarcode && (selectedTrxMode == TransactionMode.Rework || select");
            WriteLiteral(@"edTrxMode == 0)) {
                selectTrxModeRework();
                updateBarcodeScan();
            }
            else if (selectedScanOption == ScanOption.Continue) {
                selectTrxModeRework();
                $(""#barcodeBcodeTxt"").focus();
                if ($(""#barcodeBcodeTxt"").val() != """" && selectedScanAction != Action.Reverse) {
                    checkBarcodeIsValid();
                }
            }
        });
        shortcut.add(""F5"", function () {
            selectActionAdd();
            if (selectedScanOption == ScanOption.Continue) {
                $(""#barcodeBcodeTxt"").focus();
            }
        });
        shortcut.add(""F6"", function () {
            selectActionReverse();
            if (selectedScanOption == ScanOption.Continue) {
                $(""#barcodeBcodeTxt"").focus();
            }
        });
        shortcut.add(""F10"", function () {
            $('#resetBtn').trigger('click');
        });
    }

    function initializeDivis");
            WriteLiteral(@"ons() {
        if(selectedWfConfig.poCounterEnable == 1){
            $(""#pocounterdiv"").show();
        } else {
           $(""#pocounterdiv"").hide(); 
        }

        if(selectedWfConfig.poCounterNumber == 0) {
            $(""#bagbarcode-row"").hide();
            $(""#bagqty-row"").hide();

            $(""#pocounter-action-buttons"").show();
            $(""#bagcounter-action-buttons"").hide();
        } else {
            $(""#bagbarcode-row"").show();
            $(""#bagqty-row"").show();

            $(""#pocounter-action-buttons"").hide();
            $(""#bagcounter-action-buttons"").show();
        }
    }

    function selectTrxModeGood() {
        refreshmsgBoxHeaderStyle();
        if (selectedStyle == null)
            return;

        if ($('#divScrapReason').is(':visible'))
            scrapReasonSearchWindow.close();
        $('#divScrapReason').hide();
        $(""#barcodeScrapReasonTxt"").val("""");
        selectedScrapReason = null;
        selectedDefectOpp = null;

 ");
            WriteLiteral(@"       if (selectedScanOption == ScanOption.After) {
            if ((userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodAdd)) ||
                (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodReverse))
            ) {
                selectedTrxMode = TransactionMode.Good;
                $('#trxModeGoodBtn').addClass('bs-buttonPressed-good');
                $('#trxModeScrapBtn').removeClass('bs-buttonPressed-scrap');
                $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
            }
            else {
                msgBox.show('ඔබට ගුඩ් ස්කෑන් කිරීම සඳහා අවසර නැත.', 'You do not have permission for scanning ""Good"".', 'අවවාදයයි / Warning', 'BS02', 'Warning', null);
            }
            return;
        }
        if (selectedScanOption == ScanOption.Continue) {
            if ((userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodAdd)) ||
           ");
            WriteLiteral(@"     (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodReverse))
            ) {
                selectedTrxMode = TransactionMode.Good;
                $('#trxModeGoodBtn').addClass('bs-buttonPressed-good');
                $('#trxModeScrapBtn').removeClass('bs-buttonPressed-scrap');
                $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
                $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                $(""#barcodeBcodeTxt"").focus();
            }
            else {
                msgBox.show('ඔබට ගුඩ් ස්කෑන් කිරීම සඳහා අවසර නැත.', 'You do not have permission for scanning ""Good"".', 'අවවාදයයි / Warning', 'BS03', 'Warning', null);
            }
            return;
        }
    }

    function selectTrxModeScrap() {
        refreshmsgBoxHeaderStyle();
        if (selectedStyle == null)
            return;

        if (selectedScanOption == ScanOption.After) {
            if ((userPermissionList.some(permission => p");
            WriteLiteral(@"ermission.functionId === AccessibleFunctions.ScrapAdd)) ||
                (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapReverse))
            ) {
                selectedTrxMode = TransactionMode.Scrap;
                $('#trxModeScrapBtn').addClass('bs-buttonPressed-scrap');
                $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
                $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
                $(""#barcodeScrapReasonTxt"").val("""");

                if (selectedScrapReason == null && selectedScanAction != Action.Reverse) {
                    $('#divScrapReason').show();
                    $('#scrapReasonSearchBtn').trigger('click');
                }
            }
            else {
                msgBox.show('ඔබට ස්ක්‍රැප් ස්කෑන් කිරීම සඳහා අවසර නැත.', 'You do not have permission for scanning ""Scrap"".', 'අවවාදයයි / Warning', 'BS04', 'Warning', null);
            }
        }
        else if (select");
            WriteLiteral(@"edScanOption == ScanOption.Continue) {
            if ((userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapAdd)) ||
                (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapReverse))
            ) {
                selectedTrxMode = TransactionMode.Scrap;
                $('#trxModeScrapBtn').addClass('bs-buttonPressed-scrap');
                $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
                $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
                $(""#barcodeScrapReasonTxt"").val("""");
            }
            else {
                msgBox.show('ඔබට ස්ක්‍රැප් ස්කෑන් කිරීම සඳහා අවසර නැත.', 'You do not have permission for scanning ""Scrap"".', 'අවවාදයයි / Warning', 'BS05', 'Warning', null);
            }
        }
    }

    function selectTrxModeRework() {
        refreshmsgBoxHeaderStyle();
        if (selectedStyle == null)
            return;

        if (s");
            WriteLiteral(@"electedScanOption == ScanOption.After) {
            if ((userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkAdd)) ||
                (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkReverse))
            ) {
                //If not already clicked, set the current trx mode to Rework
                selectedTrxMode = TransactionMode.Rework;

                //Change trx Mode buttons clicked/unclicked styling effect
                $('#trxModeReworkBtn').addClass('bs-buttonPressed-rework');
                $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
                $('#trxModeScrapBtn').removeClass('bs-buttonPressed-scrap');

                if (selectedScrapReason == null && selectedScanAction != Action.Reverse) {
                    $('#divScrapReason').show();
                    $('#reworkReasonSearchBtn').trigger('click');
                }
            }
            else {
                msg");
            WriteLiteral(@"Box.show('ඔබට රීවර්ක් ස්කෑන් කිරීම සඳහා අවසර නැත.', 'You do not have permission for scanning ""Rework"".', 'අවවාදයයි / Warning', 'BS06', 'Warning', null);
            }
        }
        else if (selectedScanOption == ScanOption.Continue) {
            if ((userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkAdd)) ||
                (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkReverse))
            ) {
                //If not already clicked, set the current trx mode to Rework
                selectedTrxMode = TransactionMode.Rework;

                //Change trx Mode buttons clicked/unclicked styling effect
                $('#trxModeReworkBtn').addClass('bs-buttonPressed-rework');
                $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
                $('#trxModeScrapBtn').removeClass('bs-buttonPressed-scrap');
            }
            else {
                msgBox.show('ඔබට රීවර්ක් ස්කෑන් ");
            WriteLiteral(@"කිරීම සඳහා අවසර නැත.', 'You do not have permission for scanning ""Rework"".', 'අවවාදයයි / Warning', 'BS07', 'Warning', null);
            }
        }
    }

    function selectActionAdd() {
        refreshmsgBoxHeaderStyle();
        if (selectedStyle == null)
            return;

        if ((userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodAdd)) ||
            (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapAdd)) ||
            (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkAdd))
        ) {
            $('#scanActionAddBtn').addClass('bs-buttonPressed-action');
            $('#scanActionAddBtn').removeClass('bs-btn-primary-action');
            $('#scanActionReverseBtn').addClass('bs-btn-primary-action');
            $('#scanActionReverseBtn').removeClass('bs-buttonPressed-action');

            selectedScanAction = Action.Add;
        }
        else {
           ");
            WriteLiteral(@" msgBox.show('ඔබට ඇඩ් කිරීම සඳහා අවසර නැත.', 'You do not have permission for ""Add"".', 'අවවාදයයි / Warning', 'BS08', 'Warning', null);
        }
    }

    function selectActionReverse() {
        refreshmsgBoxHeaderStyle();
        if (selectedStyle == null)
            return;

        if ((userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodReverse)) ||
            (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapReverse)) ||
            (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkReverse))) {

            $('#scanActionAddBtn').addClass('bs-btn-primary-action');
            $('#scanActionAddBtn').removeClass('bs-buttonPressed-action');
            $('#scanActionReverseBtn').addClass('bs-buttonPressed-action');
            $('#scanActionReverseBtn').removeClass('bs-btn-primary-action');

            selectedScanAction = Action.Reverse;
        }
        else {
    ");
            WriteLiteral(@"        msgBox.show('ඔබට රිවර්ස් කිරීම සඳහා අවසර නැත.', 'You do not have permission for ""Reverse"".', 'අවවාදයයි / Warning', 'BS09', 'Warning', null);
        }
    }    

    function checkBarcodeIsValid() {
        DisableControllers();
        flag = true;
        if(!haltsystem) {
            refreshmsgBoxHeaderStyle();
            sacanComplete = true;
            errorbeforestauscomplete = '';
            var StyleNo = """";
            //console.log('Calling GetStyleScheduleByBarcode API by Barcode:' + $(""#barcodeBcodeTxt"").val());
        
            $.ajax({
                url: '");
            EndContext();
            BeginContext(17021, 14, false);
#line 401 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(17035, 1341, true);
            WriteLiteral(@"/Lookup/GetStyleScheduleByBarcode?Barcode=' + $(""#barcodeBcodeTxt"").val(),
                type: 'GET',
                dataType: 'json',
                //async: false,
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    $(""#ajaxBusy"").show();
                },
                complete: function () {
                    $(""#ajaxBusy"").hide();
                },
                success: function (data) {
                    //console.log(""Calling GetStyleScheduleByBarcode API succeded"")
                    //If the barcode is exist in the db
                    if (data != null) {
                        //console.log('Barcode ' + $(""#barcodeBcodeTxt"").val() + ' exists. Returned value..');
                        //console.log(data);

                        scannedBarcode = data;
                        selectedStyle = data;                 
                        selectedStyleNo = data.styleNo;
                 ");
            WriteLiteral(@"       selectedStyleDesc = data.StyleDesc;
                        
                        //console.log(wfid, clientconfig);

                        if(wfid != null){
                            if(wfid != data.wfId) { 
                                    $.ajax({
                                    url: '");
            EndContext();
            BeginContext(18377, 14, false);
#line 429 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                                     Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(18391, 3146, true);
            WriteLiteral(@"/Security/GetClientByWfIdandIP?clientIP=' + clientconfig.clientIP + '&wfid=' + data.wfId + '&clientId=' + clientconfig.clientId,
                                    type: 'GET',
                                    dataType: 'json',
                                    async: false,
                                    contentType: 'application/json',
                                    beforeSend: function () {
                                        $(""#ajaxBusy"").show();
                                    },
                                    complete: function () {
                                        $(""#ajaxBusy"").hide();
                                    },
                                    success: function (response) {
                                        if (response != null) {
                                            var temwfdepinstId = clientconfig.wfdepinstId;

                                            clientconfig = {
                                               ");
            WriteLiteral(@"     ""clientId"": response.clientId,
                                                    ""dataCaptureMode"": response.dataCaptureMode,
                                                    ""facName"": response.facName,
                                                    ""loginMode"": response.loginMode,
                                                    ""opCode1"": response.opCode1,
                                                    ""opCode2"": response.opCode2,
                                                    ""operationName"": response.operationName,
                                                    ""recStatus"": response.recStatus,
                                                    ""selectMode"": response.selectMode,
                                                    ""teamId"": response.teamId,
                                                    ""teamName"": response.teamName,
                                                    ""facName"": response.facName,
                                           ");
            WriteLiteral(@"         ""wfdepinstId"": response.wfdepinstId,
                                                    ""wfId"": wfid,
                                                    ""clientIP"": clientconfig.clientIP
                                                };   
                                            
                    
                                                if (clientconfig.teamId == 0 || clientconfig.teamId == null) {
                                                    setMainOperationVisibility();
                                                }

                                                if(temwfdepinstId !=  clientconfig.wfdepinstId) {
                                                    if (clientconfig.wfdepinstId != 0){
                                                        // console.log('Calling GetWFConfigurationbyWFOpp by WFId:' + wfid + ', OperationCode:' + clientconfig.opCode1 + ', TeamId:' + clientconfig.teamId);
                                                        $.");
            WriteLiteral("ajax({\r\n                                                            url: \'");
            EndContext();
            BeginContext(21538, 14, false);
#line 471 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                                                             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(21552, 149, true);
            WriteLiteral("/Lookup/GetConfigurationWFDEPInstId?WFDEPInstId=\' + clientconfig.wfdepinstId,  \r\n                                                            //url: \'");
            EndContext();
            BeginContext(21702, 14, false);
#line 472 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                                                               Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(21716, 12860, true);
            WriteLiteral(@"/Lookup/GetWFConfigurationbyWFOpp?WFId=' + wfid + '&OperationCode=' + clientconfig.opCode1 + '&TeamId=' + clientconfig.teamId,
                                                            type: 'GET',
                                                            dataType: 'json',
                                                            async: false,
                                                            contentType: 'application/json; charset=utf-8',
                                                            beforeSend: function () {
                                                                $(""#ajaxBusy"").show();
                                                            },
                                                            complete: function () {
                                                                $(""#ajaxBusy"").hide();
                                                            },
                                                            success: function (data");
            WriteLiteral(@"2) {
                                                                //Check whether barcode is exist in the db
                                                                //console.log('Calling GetWFConfigurationbyWFOpp succeded.');
                                                                if (data2 != null) {
                                                                    //console.log('GetWFConfigurationbyWFOpp API result received from DCAP db..');
                                                                    //console.log(data);
                                                                    sessionStorage.setItem(""ScanOpMode"", data2.scanOpMode);
                                                                    selectedWfConfig = data2;
                                                                    
                                                                    initializeDivisons();

                                                                    clientco");
            WriteLiteral(@"nfig = {
                                                                        ""clientId"": clientconfig.clientId,
                                                                        ""dataCaptureMode"": clientconfig.dataCaptureMode,
                                                                        ""pocounterNumber"" : clientconfig.pocounterNumber,
                                                                        ""facName"": clientconfig.facName,
                                                                        ""loginMode"": clientconfig.loginMode,
                                                                        ""opCode1"": clientconfig.opCode1,
                                                                        ""opCode2"": clientconfig.opCode2,
                                                                        ""operationName"": clientconfig.operationName,
                                                                        ""recStatus"": clientconfig.recStatus,
     ");
            WriteLiteral(@"                                                                   ""selectMode"": clientconfig.selectMode,
                                                                        ""teamId"": clientconfig.teamId,
                                                                        ""teamName"": clientconfig.teamName,
                                                                        ""facName"": clientconfig.facName,
                                                                        ""wfdepinstId"": selectedWfConfig.wfdepinstId,
                                                                        ""wfId"": clientconfig.wfId,
                                                                        ""clientIP"": clientconfig.clientIP
                                                                    };


                                                                    setClientConfigInfo();

                                                                    if (data2.scanOpMode == ScanOption.C");
            WriteLiteral(@"ontinue) {
                                                                        selectedScanOption = ScanOption.Continue;
                                                                        $('#trxModeBtnPanel').show();
                                                                        $('#scanActionButton').show();
                                                                        //$('#dataLabelScanOpt').html('Continue');
                                                                        var LblVal = clientconfig.operationName + ' / Continue'
                                                                        $('#dataLabelOperation').html(LblVal);
                                                                        $('#helpSin').html(""ස්කෑන් කිරීමට පෙර ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න."");
                                                                        $('#helpEng').html(""Select Scan Action and Transaction before scanning the barcode."");
                     ");
            WriteLiteral(@"                                                   $('#barcodeBcodeTxt').attr(""disabled"", ""disabled"");
                                                                        selectTrxModeGood();
                                                                    }
                                                                    else if (data2.scanOpMode == ScanOption.Before) {
                                                                        selectedScanOption = ScanOption.Before;
                                                                        $('#trxModeBtnPanel').show();
                                                                        $('#scanActionButton').show();
                                                                        //$('#dataLabelScanOpt').html('Before'); 
                                                                        var LblVal1 = clientconfig.operationName + ' / Before'
                                                                        $");
            WriteLiteral(@"('#dataLabelOperation').html(LblVal1);
                                                                        $('#helpSin').html(""ස්කෑන් කිරීමට පෙර ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න."");
                                                                        $('#helpEng').html(""Select Scan Action and Transaction before scanning the barcode."");
                                                                    }
                                                                    else if (data2.scanOpMode == ScanOption.After) {
                                                                        selectedScanOption = ScanOption.After;
                                                                        $('#trxModeBtnPanel').show();
                                                                        $('#scanActionButton').show();
                                                                        //$('#dataLabelScanOpt').html('After');
                                                   ");
            WriteLiteral(@"                     var LblVal2 = clientconfig.operationName + ' / After'
                                                                        $('#dataLabelOperation').html(LblVal2);
                                                                        $('#trxModeReworkBtn').attr(""disabled"", ""disabled"");
                                                                        $('#trxModeGoodBtn').attr(""disabled"", ""disabled"");
                                                                        $('#trxModeScrapBtn').attr(""disabled"", ""disabled"");
                                                                        //$('#helpSin').html(""ස්කෑන් කිරීමෙන් පසු ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න."");
                                                                        //$('#helpEng').html(""Select Scan Action and Transaction after scanning the barcode."");
                                                                        $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                        ");
            WriteLiteral(@"                                                $(""#barcodeBcodeTxt"").focus();
                                                                    }

                                                                    if (data2.poCounterEnable == 1) {
                                                                        $('#counterLables').show();
                                                                        loadPOcounterValues();
                                                                    }
                                                                    else {
                                                                        $('#counterLables').hide();
                                                                    }

                                                                    //Don't change below order as default has to be set for ""Add""
                                                                    if (userPermissionList.some(permission => permissio");
            WriteLiteral(@"n.functionId === AccessibleFunctions.GoodReverse)) {
                                                                        $('#trxModeGoodBtn').show();
                                                                        $('#scanActionReverseBtn').show();

                                                                        selectActionReverse();
                                                                    }
                                                                    if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodAdd)) {
                                                                        $('#trxModeGoodBtn').show();
                                                                        $('#scanActionAddBtn').show();

                                                                        selectActionAdd();
                                                                    }
                                                   ");
            WriteLiteral(@"                 if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapReverse)) {
                                                                        $('#trxModeScrapBtn').show();
                                                                        $('#scanActionReverseBtn').show();

                                                                        selectActionReverse();
                                                                    }
                                                                    if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapAdd)) {
                                                                        $('#trxModeScrapBtn').show();
                                                                        $('#scanActionAddBtn').show();

                                                                        selectActionAdd();
                                                  ");
            WriteLiteral(@"                  }
                                                                    if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkReverse)) {
                                                                        $('#trxModeReworkBtn').show();
                                                                        $('#scanActionReverseBtn').show();

                                                                        selectActionReverse();
                                                                    }

                                                                    if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkAdd)) {
                                                                        $('#trxModeReworkBtn').show();
                                                                        $('#scanActionAddBtn').show();

                                                                ");
            WriteLiteral(@"        selectActionAdd();
                                                                    }
                                                                    //console.log('Calling GetWFDetailByID API by wfid:' + wfid);
                                                                    if(wfid == null)
                                                                        wfid = clientconfig.wfId

                                                                    $.ajax({
                                                                        url: '");
            EndContext();
            BeginContext(34577, 14, false);
#line 605 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                                                                         Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(34591, 8675, true);
            WriteLiteral(@"/Lookup/GetWFDetailByID?WFId=' + data.wfId,
                                                                        type: 'GET',
                                                                        dataType: 'json',
                                                                        async: false,
                                                                        contentType: 'application/json; charset=utf-8',
                                                                        beforeSend: function () {
                                                                            $(""#ajaxBusy"").show();
                                                                        },
                                                                        complete: function () {
                                                                            $(""#ajaxBusy"").hide();
                                                                        },
                                              ");
            WriteLiteral(@"                          success: function (data3) {
                                                                            //console.log('Calling GetWFDetailByID API succeded.');
                                                                            if (data3 != null) {
                                                                                //console.log('GetWFDetailByID API result received from DCAP db..');
                                                                                selectedWorkflow = data3;
                                                                                //console.log(selectedWorkflow);
                                                                            }
                                                                            else {
                                                                                msgBox.show('කාර්ය ප්‍රවාහයට අදාල තොරතුරු නැත. කරුණාකර තොරතුරු තාක්ෂණ නිලධාරියෙකු අමතන්න.',
                               ");
            WriteLiteral(@"                                                     'Workflow details not found. Please contact a IT helpdesk officer',
                                                                                    'අවවාදයයි / Warning',
                                                                                    'BS22',
                                                                                    'Warning',
                                                                                    null);
                                                                            }

                                                                        },
                                                                        error: function (jqXHR, textStatus, errorThrown) {
                                                                            formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                                                                        }
                              ");
            WriteLiteral(@"                                      });
                                                                }
                                                                else {
                                                                    //console.log('No configuration details available for selected style.');
                                                                    msgBox.show('තෝරන ලද ස්ටයිල් සඳහා වින්‍යාස තොරතුරු නොමැත. කරුණාකර තොරතුරු තාක්ෂණ නිලධාරියෙකු අමතන්න.',
                                                                        'No configuration details available for selected style. Please contact a IT helpdesk officer',
                                                                        'අවවාදයයි / Warning',
                                                                        'BS23',
                                                                        'Warning',
                                                                        null);
                    ");
            WriteLiteral(@"                                            }
                                                            },
                                                            error: function (jqXHR, textStatus, errorThrown) {
                                                                formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                                                            }
                                                        });
                                                    }
                                                }

                                                $('#dataLabelFactory').html(clientconfig.facName);
                                                $('#dataLabelTeam').html(clientconfig.teamName + '-[' + clientconfig.wfdepinstId + ']');
                                                //$('#dataLabelOperation').html(clientconfig.operationName);
                                                $('#dataLabelOperation').html(clientconfig.operationName)");
            WriteLiteral(@";
                                                $('#dataLabelClientIP').html(clientIP);

                                        } else {
                                            msgBox.show('කාර්ය ප්‍රවාහයට අවසර නැත. කරුණාකර තොරතුරු තාක්ෂණ නිලධාරියෙකු අමතන්න.',
                                                        'Client is not configured for this Workflow..WFID = '+ wfid + ' Please contact a IT helpdesk officer' ,
                                                        'අවවාදයයි / Warning',
                                                        'BS22',
                                                        'Warning',
                                                        null);
                                                $(""#barcodeBcodeTxt"").val("""");
                                                $(""#barcodeBcodeTxt"").focus();
                                                
                                                sacanComplete = false;
                                ");
            WriteLiteral(@"                flag = false;
                                                errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Client is not configured for this Workflow..WFID'
                                                return;
                                            }          
                                    },
                                    error: function (jqXHR, textStatus, errorThrown) {
                                        flag = false;
                                        formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                                    }
                                    }); 
                            } else {
                                if(clientconfig.wfId == data.wfId) {
                                    //Skip
                                } else {
                                    
                                    clientconfig = {
                                            ""clientId"": clientconfig.clientId");
            WriteLiteral(@",
                                            ""dataCaptureMode"": clientconfig.dataCaptureMode,
                                            ""pocounterNumber"" : clientconfig.pocounterNumber,
                                            ""facName"": clientconfig.facName,
                                            ""loginMode"": clientconfig.loginMode,
                                            ""opCode1"": clientconfig.opCode1,
                                            ""opCode2"": clientconfig.opCode2,
                                            ""operationName"": clientconfig.operationName,
                                            ""recStatus"": clientconfig.recStatus,
                                            ""selectMode"": clientconfig.selectMode,
                                            ""teamId"": clientconfig.teamId,
                                            ""teamName"": clientconfig.teamName,
                                            ""facName"": clientconfig.facName,
                          ");
            WriteLiteral(@"                  ""wfdepinstId"": selectedWfConfig.wfdepinstId,
                                            ""wfId"": data.wfId,
                                            ""clientIP"": clientconfig.clientIP
                                        };

                                    GetClientByWF();
                                }
                            }
                        } else {
                            $.ajax({
                                url: '");
            EndContext();
            BeginContext(43267, 14, false);
#line 711 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(43281, 30779, true);
            WriteLiteral(@"/Security/GetClientByWfIdandIP?clientIP=' + clientconfig.clientIP + '&wfid=' + wfid + '&clientId=' + clientconfig.clientId,
                                type: 'GET',
                                dataType: 'json',
                                async: false,
                                contentType: 'application/json',
                                beforeSend: function () {
                                    $(""#ajaxBusy"").show();
                                },
                                complete: function () {
                                    $(""#ajaxBusy"").hide();
                                },
                                success: function (response) {
                                    if (response != null) {
                                        var temwfdepinstId = clientconfig.wfdepinstId;

                                        clientconfig = {
                                                ""clientId"": response.clientId,
                            ");
            WriteLiteral(@"                    ""dataCaptureMode"": response.dataCaptureMode,
                                                ""facName"": response.facName,
                                                ""loginMode"": response.loginMode,
                                                ""opCode1"": response.opCode1,
                                                ""opCode2"": response.opCode2,
                                                ""operationName"": response.operationName,
                                                ""recStatus"": response.recStatus,
                                                ""selectMode"": response.selectMode,
                                                ""teamId"": response.teamId,
                                                ""teamName"": response.teamName,
                                                ""facName"": response.facName,
                                                ""wfdepinstId"": response.wfdepinstId,
                                                ""wfId"": wfid,
   ");
            WriteLiteral(@"                                             ""clientIP"": clientconfig.clientIP
                                            };   
                                        
                
                                            if (clientconfig.teamId == 0 || clientconfig.teamId == null) {
                                                setMainOperationVisibility();
                                            }

                                            if(temwfdepinstId !=  clientconfig.wfdepinstId) {
                                                refresValuesonChangeStyle();
                                            }

                                            setClientConfigInfo();
                                    }   
                                    else 
                                    {
                                            msgBox.show('කාර්ය ප්‍රවාහයට අවසර නැත. කරුණාකර තොරතුරු තාක්ෂණ නිලධාරියෙකු අමතන්න.',
                                                    'C");
            WriteLiteral(@"lient is not configured for this Workflow..WFID = '+ wfid + ' Please contact a IT helpdesk officer' ,
                                                    'අවවාදයයි / Warning',
                                                    'BS22',
                                                    'Warning',
                                                    null);
                                            $(""#barcodeBcodeTxt"").val("""");
                                            $(""#barcodeBcodeTxt"").focus();
                                            sacanComplete = false;
                                            flag = false;
                                            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Client is not configured for this Workflow..WFID'
                                            return;
                                        }          
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
");
            WriteLiteral(@"                                    formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                                    flag = false;
                                }
                            });
                        }

                        wfid = data.wfId;
                        
                        //Check whether barcode style is matched with the user input
                        if (scannedBarcode.styleNo != $(""#barcodeStyleTxt"").val()) {
                            msgBox.show('තෝරන ලද ස්ටයිල් බාර්කෝඩ් කේතය සමඟ නොගැලපේ. නැවත පරීක්ෂා කරන්න.', 'Selected Style does not match with Barcode.', 'අවවාදයයි / Warning', 'BS10', 'Warning', function () {
                                scannedBarcode = null;
                                $(""#barcodeBcodeTxt"").val("""");
                                $(""#barcodeBcodeTxt"").focus();
                            });
                            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Selected Style does not match wi");
            WriteLiteral(@"th Barcode.'
                            sacanComplete = false;
                            flag = false;
                            EnableControllers();
                            return;
                        }
                        //Check whether barcode color is matched with the user input
                        else if (scannedBarcode.colorId != 0 && selectedColor != null && scannedBarcode.colorId != selectedColor.l4id) {
                            msgBox.show('තෝරන ලද වර්ණය බාර්කෝඩ් කේතය සමඟ නොගැලපේ. නැවත පරීක්ෂා කරන්න.', 'Selected Color does not match with Barcode.', 'අවවාදයයි / Warning', 'BS11', 'Warning', function () {
                                scannedBarcode = null;
                                $(""#barcodeBcodeTxt"").val("""");
                                $(""#barcodeBcodeTxt"").focus();
                            });
                            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Selected Color does not match with Barcode.'
                  ");
            WriteLiteral(@"          sacanComplete = false;
                            flag = false;
                            EnableControllers();
                            return;
                        }
                        else if (selectedWfConfig.validateSheduleChange == 1 && $(""#lastBarcodeDataLabel"").html() != """"  && selectedSheduleNo != null && scannedBarcode.scheduleNo != selectedSheduleNo) {//$(""#lastBarcodeDataLabel"").html().substring(0, 6)) {                         
                                msgBoxConfirm.show('මෙතෙක් ස්කෑන් කරගෙන ආ ෂෙඩියුල් අංකය හා මෙම බාර් කොඩයේ ෂෙඩියුල් අංකය වෙනස්ය. ඉදිරියට යන්න ..',
                                    'Sdule no is differant from the one was scanning, continue with new shedule no..',
                                    'තහවුරු කරන්න / Confirm',
                                    'BS24',
                                    'Confirm',
                                    function () {
                                        isValidBarcode = true;
            ");
            WriteLiteral(@"                            $('#scheduleDataLabel').html(scannedBarcode.scheduleNo);
                                        $('#poDataLabel').html(scannedBarcode.poNo);
                                        $('#dataLabelzFeature').html(scannedBarcode.zfeature);
                                        $('#sizeDataLabel').html(scannedBarcode.sizeDesc);
                                        $('#bcColorDataLabel').html(scannedBarcode.colorDesc);
                                        $('#ShadeLotPatt').html(scannedBarcode.lotNo + ""/"" + scannedBarcode.pattern);        

                                        if (selectedScanOption == ScanOption.After) {
                                            $('#trxModeReworkBtn').removeAttr(""disabled"");
                                            $('#trxModeGoodBtn').removeAttr(""disabled"");
                                            $('#trxModeScrapBtn').removeAttr(""disabled"");
                                            $(""#barcodeBcodeTxt"").attr(""disable");
            WriteLiteral(@"d"", ""disabled"");
                                            $('#scannedStatusDataLabel').html("""");
                                            EnableControllers();
                                        }
                                        else if (selectedScanOption == ScanOption.Continue) {
                                            updateBarcodeScan();
                                            $('#trxModeReworkBtn').removeAttr(""disabled"");
                                            $('#trxModeGoodBtn').removeAttr(""disabled"");
                                            $('#trxModeScrapBtn').removeAttr(""disabled"");
                                        }
                                    },
                                    function () {
                                        $(""#barcodeBcodeTxt"").val("""");
                                        $(""#barcodeBcodeTxt"").focus();
                                        errorbeforestauscomplete = errorbeforestauscomplete + ' ' + '");
            WriteLiteral(@"Shedule conffirmation : cancelled.'
                                        sacanComplete = false;
                                        EnableControllers();
                                        return;
                                    });
                                beeponce();                        
                        }
                        else {
                            isValidBarcode = true;
                            $('#scheduleDataLabel').html(scannedBarcode.scheduleNo);
                            $('#poDataLabel').html(scannedBarcode.poNo);
                            $('#dataLabelzFeature').html(scannedBarcode.zfeature);
                            $('#sizeDataLabel').html(scannedBarcode.sizeDesc);
                            $('#bcColorDataLabel').html(scannedBarcode.colorDesc);
                            $('#ShadeLotPatt').html(scannedBarcode.lotNo + ""/"" + scannedBarcode.pattern);        

                            if (selectedScanOption == ScanOption.A");
            WriteLiteral(@"fter) {
                                $('#trxModeReworkBtn').removeAttr(""disabled"");
                                $('#trxModeGoodBtn').removeAttr(""disabled"");
                                $('#trxModeScrapBtn').removeAttr(""disabled"");
                                $(""#barcodeBcodeTxt"").attr(""disabled"", ""disabled"");
                                $('#scannedStatusDataLabel').html("""");
                                EnableControllers();
                            }
                            else if (selectedScanOption == ScanOption.Continue) {
                                $('#trxModeReworkBtn').removeAttr(""disabled"");
                                $('#trxModeGoodBtn').removeAttr(""disabled"");
                                $('#trxModeScrapBtn').removeAttr(""disabled"");
                                updateBarcodeScan();
                                $('#bagBarcodeBcodeTxt').focus();
                            }
                        }

                        selectedShe");
            WriteLiteral(@"duleNo = data.scheduleNo;
                    }
                    else {
                        //console.log('Barcode ' + $(""#barcodeBcodeTxt"").val() + ' not exists.');
                        isValidBarcode = false;
                        flag = false;
                        msgBox.show('මෙම බාර්කෝඩ් අගය වලංගු නැත.', 'This barcode is not valid.', 'අවවාදයයි / Warning', 'BS12', 'Warning', function () {
                            scannedBarcode = null;
                            $(""#barcodeBcodeTxt"").val("""");
                            $(""#barcodeBcodeTxt"").focus();
                            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'This barcode is not valid.'
                            sacanComplete = false;
                            EnableControllers();
                        });
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    flag = false;
                    formatErrorMessage(");
            WriteLiteral(@"jqXHR, errorThrown, ""Barcode"");
                    errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Get Shedulle by Barcode API Error.'
                    sacanComplete = false;
                    EnableControllers();
                }
            });
        } else {
            msgBox.show('ස්කෑන් පද්ධතිය නවතා දමා ඇත. කවුන්ටර හෝ වෙනත් වලංගු කිරීම් සඳහා පරීක්ෂා කරන්න',
                        'The scan system is on halt. check for counter or other validations',
                        'අවවාදයයි / Warning',
                        'BS22',
                        'Warning',
                        null);
            $('#barcodeBcodeTxt').val('');
            $('#barcodeBcodeTxt').focus();
            EnableControllers();
        }      
    }

    function updateBarcodeScan() {
        refreshmsgBoxHeaderStyle();
        var UserInList = [];

        if (selectedScanAction == Answer.Null) {
            EnableControllers();
            return;
            errorbeforestau");
            WriteLiteral(@"scomplete = errorbeforestauscomplete + ' ' + 'selected Scan Action Answer in null.'
            sacanComplete = false;
        }

        goodQty = 0;
        scrapQty = 0;
        reworkQty = 0;

        //console.log('Called updateBarcodeScan method');

        if (selectedTrxMode == TransactionMode.Good && selectedScanAction == Action.Add) {
            //console.log('SelectedTrxMode : Good , SelectedScanAction : Add');
            selectedFunction = AccessibleFunctions.GoodAdd;
            goodQty = 1;

            scrapQty = 0;
            reworkQty = 0;
        }
        else if (selectedTrxMode == TransactionMode.Good && selectedScanAction == Action.Reverse) {
            //console.log('SelectedTrxMode : Good , SelectedScanAction : Reverse');
            selectedFunction = AccessibleFunctions.GoodReverse;
            goodQty = 1;

            scrapQty = 0;
            reworkQty = 0;
        }
        else if (selectedTrxMode == TransactionMode.Scrap && selectedScanAction == Ac");
            WriteLiteral(@"tion.Add) {
            //console.log('SelectedTrxMode : Scrap , SelectedScanAction : Add');
            selectedFunction = AccessibleFunctions.ScrapAdd;
            scrapQty = 1;

            goodQty = 0;
            reworkQty = 0;
        }
        else if (selectedTrxMode == TransactionMode.Scrap && selectedScanAction == Action.Reverse) {
            //console.log('SelectedTrxMode : Scrap , SelectedScanAction : Reverse');
            selectedFunction = AccessibleFunctions.ScrapReverse;
            scrapQty = 1;

            goodQty = 0;
            reworkQty = 0;
        }
        else if (selectedTrxMode == TransactionMode.Rework && selectedScanAction == Action.Add) {
            //console.log('SelectedTrxMode : Rework , SelectedScanAction : Add');
            selectedFunction = AccessibleFunctions.ReworkAdd;
            reworkQty = 1;

            scrapQty = 0;
            goodQty = 0;
        }
        else if (selectedTrxMode == TransactionMode.Rework && selectedScanAction == Ac");
            WriteLiteral(@"tion.Reverse) {
            //console.log('SelectedTrxMode : Rework , SelectedScanAction : Reverse');
            selectedFunction = AccessibleFunctions.ReworkReverse;
            reworkQty = 1;

            scrapQty = 0;
            goodQty = 0;
        }
        var selectedUserPermission = $.grep(userPermissionList, function (h) {
            return h.functionId == selectedFunction
        });
        //added || selectedTrxMode == TransactionMode.Rework //Nalinda
        //Check whether Scrap is selected as Transaction Mode but Scrap Rerason is not selected
        if (selectedTrxMode == TransactionMode.Scrap && selectedScrapReason == null && selectedScanAction != Action.Reverse) {
            if (selectedScanOption == ScanOption.Continue) {
                $('#divScrapReason').show();
                $('#scrapReasonSearchBtn').trigger('click');
            }
            else if (selectedScanOption == ScanOption.After) {
                $('#divScrapReason').show();
                $('#s");
            WriteLiteral(@"crapReasonSearchBtn').trigger('click');
            }
            EnableControllers();
            return;
        }

        //added || selectedTrxMode == TransactionMode.Rework //Nalinda
        //Check whether Scrap is selected as Transaction Mode but Scrap Rerason is not selected
        if (selectedTrxMode == TransactionMode.Rework && selectedScrapReason == null && selectedScanAction != Action.Reverse) {
            if (selectedScanOption == ScanOption.Continue) {
                $('#divScrapReason').show();
                $('#reworkReasonSearchBtn').trigger('click');
            }
            else if (selectedScanOption == ScanOption.After) {
                $('#divScrapReason').show();
                $('#reworkReasonSearchBtn').trigger('click');
            }
            EnableControllers();
            return;
        }

        //added || selectedTrxMode == TransactionMode.Rework //Nalinda
        //Check whether Rework is selected as Transaction & Rework reason is selected  b");
            WriteLiteral(@"ut Defect Opperation is not selected
        if (selectedTrxMode == TransactionMode.Rework && selectedScrapReason != null && selectedDefectOpp == null && selectedScanAction != Action.Reverse) {
            if (selectedScanOption == ScanOption.Continue) {
                openReworkReasonPannel();
            }
            else if (selectedScanOption == ScanOption.After) {
                openReworkReasonPannel();
            }
            EnableControllers();
            return;
        }



        //Check whether barcode style is matched with the user input
        if (scannedBarcode.styleNo != $(""#barcodeStyleTxt"").val()) {
            msgBox.show('තෝරන ලද ස්ටයිල්ය බාර්කෝඩ් කේතය සමඟ නොගැලපේ. නැවත පරීක්ෂා කරන්න.', 'Selected Style does not match with Barcode.', 'අවවාදයයි / Warning', 'BS15', 'Warning', function () {
                $('#styleSearchBtn').focus();
            });
            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Selected Style does not match with Barcode.");
            WriteLiteral(@"'
            sacanComplete = false;
            EnableControllers();
            return;
        }
        //Check whether barcode color is matched with the user input
        else if (scannedBarcode.colorId != 0 && selectedColor != null && scannedBarcode.colorId != selectedColor.l4id) {
            msgBox.show('තෝරන ලද වර්ණය බාර්කෝඩ් කේතය සමඟ නොගැලපේ. නැවත පරීක්ෂා කරන්න.', 'Selected Color does not match with Barcode.', 'අවවාදයයි / Warning', 'BS16', 'Warning', function () {
                $('#colorSearchBtn').focus();
            });
            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Selected Color does not match with Barcode.'
            sacanComplete = false;
            EnableControllers();
            return;
        }
        //Scan Option is set to Before but user has not selected either Scan Action and the Transaction Mode or both
        else if ((selectedScanOption == ScanOption.Before) &&
            ((selectedScanAction == Action.Non) || (selectedTrxMode ==");
            WriteLiteral(@" TransactionMode.Non))) {
            msgBox.show('කරුණාකර ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න.', 'Please select both Scan Action and Transaction Mode.', 'අවවාදයයි / Warning', 'BS17', 'Warning', null);
            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Please select both Scan Action and Transaction Mode.'
            sacanComplete = false;
            EnableControllers();
            return;
        }
        //Scan Option is set to Continue but user has not selected Scan Action and the Transaction Mode
        else if ((selectedScanOption == ScanOption.Continue) &&
            ((selectedScanAction == Action.Non) || (selectedTrxMode == TransactionMode.Non))) {
            msgBox.show('කරුණාකර ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න.', 'Please select both Scan Action and Transaction Mode.', 'අවවාදයයි / Warning', 'BS18', 'Warning', null);
            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Please select both Scan Action and Transaction Mode.'
            saca");
            WriteLiteral(@"nComplete = false;
            EnableControllers();
            return;
        }
        else if (!userPermissionList.some(permission => permission.functionId === selectedFunction)) {
            msgBox.show('ඔබට තෝරන ලද ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය සඳහා අවසර නැත.', 'You do not have access to selected Scan Action and Transaction Mode.', 'අවවාදයයි / Warning', 'BS19', 'Warning', null);
            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'You do not have access to selected Scan Action and Transaction Mode.'
            sacanComplete = false;
            EnableControllers();
            return;
        }
        else if (!userPermissionList.some(permission => permission.functionId === selectedFunction)) {
            msgBox.show('ඔබට තෝරන ලද ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය සඳහා අවසර නැත.', 'You do not have access to selected Scan Action and Transaction Mode.', 'අවවාදයයි / Warning', 'BS20', 'Warning', null);
            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Y");
            WriteLiteral(@"ou do not have access to selected Scan Action and Transaction Mode.'
            sacanComplete = false;
            EnableControllers();
            return;
        }
        else if (!(selectedUserPermission.some(permission => permission.sbuCode === selectedWorkflow.sbucode)) &&
            !(selectedUserPermission.some(permission => permission.facCode === selectedWorkflow.facCode)) &&
            !(selectedUserPermission.some(permission => permission.depId === clientconfig.opCode1))) {
            msgBox.show('තෝරන ලද SBU Code - ' + selectedWorkflow.sbucode + ' Factory Code - ' + selectedWorkflow.facCode + ' Operation Code - ' + clientconfig.opCode1 + ' සඳහා ඔබට අවසර නැත.', 'You do not have access to selected SBU Code - ' + selectedWorkflow.sbucode + ' Factory Code - ' + selectedWorkflow.facCode + ' Operation Code - ' + clientconfig.opCode1 + '.', 'අවවාදයයි / Warning', 'BS21', 'Warning', null);
            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'You do not have access to select");
            WriteLiteral(@"ed SBU Code.'
            sacanComplete = false;
            EnableControllers();
            return;
        }



        else {
            if (selectedScanAction == Action.Add) {
                var plussminus = 1;
            }
            else if (selectedScanAction == Action.Reverse) {
                var plussminus = 2;
            }

            var ScannedItem = {
                ""WfdepinstId"": selectedWfConfig.wfdepinstId,
                ""WFID"": wfid,
                ""FacCode"": selectedWorkflow.facCode,
                ""Sbucode"": selectedWorkflow.sbucode,
                ""GroupCode"": selectedWorkflow.groupCode,
                ""StyleId"": scannedBarcode.styleId,
                ""ScheduleId"": scannedBarcode.scheduleId,
                ""ColorId"": (scannedBarcode === null ? 0 : scannedBarcode.colorId),
                ""ColorIdUI"": (selectedColor === null ? 0 : selectedColor.l4id),
                ""SizeId"": scannedBarcode.sizeId,
                ""EnteredQtyGd"": (plussminus ===");
            WriteLiteral(@" 1 ? goodQty : goodQty * -1),
                ""EnteredQtyScrap"": (plussminus === 1 ? scrapQty : scrapQty * -1),
                ""EnteredQtyRw"": (plussminus === 1 ? reworkQty : reworkQty * -1),
                ""Barcode"": $(""#barcodeBcodeTxt"").val(),
                ""BagBarCodeNo"": """",
                ""CounterNumber"": 0,
                ""BagSize"": 0,
                ""BagStatus"": 1,
                ""HourNo"": 0,
                ""RRId"": (selectedScrapReason === null ? null : selectedScrapReason.rrid),
                ""DOpsId"": (selectedDefectOpp === null ? null : selectedDefectOpp.dopsId),
                ""JobNo"": """",
                ""CreatedBy"": txUser.userId,
                ""TeamId"": selectedWfConfig.teamId,
                ""CreatedMachine"": clientconfig.clientId,
                ""TxnMode"": selectedTrxMode,
                ""PlussMinus"": plussminus,
                ""OperationCode"": clientconfig.opCode1
            };

            //console.log('Assigning Bag Barcode Details');
            
");
            WriteLiteral(@"            //console.log('Scanned Item (Sent to DCAP db)..');
            //console.log(ScannedItem);
            UserInList.push(ScannedItem);
            $('#lastBarcodeDataLabel').html($(""#barcodeBcodeTxt"").val());

            checkforaongoingbaginlivecounter(UserInList);
        }
    }

    //Check For Ongoing Bags in Live Conter : START
    function checkforaongoingbaginlivecounter(UserInList) {
        if(selectedWfConfig.poCounterEnable == 1) {
            if(selectedWfConfig.poCounterNumber == 1){
                if(UserInList[0].EnteredQtyGd > 0 ) {
                    if(runningPOCounters.length != 0) {
                        var query = {styleId: UserInList[0].StyleId, scheduleId: UserInList[0].ScheduleId, colorId: UserInList[0].ColorId};
                        var result = runningPOCounters.filter(search, query);

                        //console.log(""counter search results checker :"", runningPOCounters, query, result);

                        if(result.length != 0){
  ");
            WriteLiteral(@"                          sentToDCAPdb(UserInList);
                        } else {
                            ScanDataBackup = UserInList[0];
                            $(""#bagBarcodeBcodeTxt"").removeAttr(""disabled"");
                            $('#BAGBtnClear').attr(""disabled"", ""disabled"");
                            OpenPOCounterPannel(-1);
                        }
                    } else {
                        ScanDataBackup = UserInList[0];
                        $(""#bagBarcodeBcodeTxt"").removeAttr(""disabled"");
                        $('#BAGBtnClear').attr(""disabled"", ""disabled"");
                        OpenPOCounterPannel(-1);
                    }
                } else {
                    sentToDCAPdb(UserInList);
                }
            } else {
                sentToDCAPdb(UserInList);
            }
        } else {
            sentToDCAPdb(UserInList);
        }
    }

    //Search function to search to arrays
    function search(user){
        retur");
            WriteLiteral(@"n Object.keys(this).every((key) => user[key] === this[key]);
    }
    //Check For Ongoing Bags in Live Conter : END

    //Get Array max value
    function sortByAttribue(arr, attribute) {
        return arr.sort(function(a,b) { 
            return a[attribute] > b[attribute];
        });
    }

    //Changed by NimanthaH
    function OpenPOCounterPannel(arg) {
        if(arg != -1){
            selectedScanCounterId = $('#POCuntID' + arg).text()
            $('#bagBarcodeBcodeTxt').val($('#BagBarcodeVal' + arg).text());
            $('#bagSizeTxt').val($('#BagSizeVal' + arg).text());
            $(""#bagBarcodeBcodeTxt"").attr(""disabled"", ""disabled"");
            $('#counterNumber').val($('#counterNumber' + arg).text());
            $(""#counterNumber"").attr(""disabled"", ""disabled"");
        }
        else {
            var cpunterNumber = 1;
            if(runningPOCounters.length != 0) {
                cpunterNumber = sortByAttribue(runningPOCounters, ""counterNumber"")[0].counterNumber");
            WriteLiteral(@";
            }
            selectedScanCounterId = ""new counter"";
            $(""#bagBarcodeBcodeTxt"").removeAttr(""disabled"");
            $(""#counterNumber"").removeAttr(""disabled"");
            $('#bagBarcodeBcodeTxt').val("""");
            $('#bagSizeTxt').val("""");
            $('#counterNumber').val(parseInt(cpunterNumber) + 1);
        }

        if (selectedScanCounterId != """") {
            poCounterResetWindow = $(""#poCounterResetWindow"").kendoWindow({
                width: ""60%"",
                //height: ""64%"",
                title: ""Counter Start / Reset"",
                visible: false,
                actions: [
                    ""Close""
                ],
                close: function(e) {
                    $(""#barcodeBcodeTxt"").val("""");
                    resetControls();
                    EnableInputs();
                    EnableControllers();
                    $(""#barcodeBcodeTxt"").focus();
                },
                modal: true,
               ");
            WriteLiteral(@" resizable: false,
                draggable: false,
                activate: function () {
                    $(""#bagBarcodeBcodeTxt"").select();
                    $(""#bagBarcodeBcodeTxt"").focus();
                },
                pinned: true,
            }).data(""kendoWindow"");

            poCounterResetWindow.wrapper.find('.k-window-titlebar').css({
                'background-color': 'black',
                'font-size': '18px',
                'color': 'white'
            });

            var arrows = [38, 40];
            poCounterResetWindow.open().center();

            //Declare if any Pass variables
            if(arg != -1) {
                $('#CounterID').html(selectedScanCounterId);
                $('#styleTxt').html($('#Style' + arg).text());
                $('#sheduleTxt').html($('#Shedule' + arg).text());
                $('#zFeatureTxt').html($('#ZFeature' + arg).text());
                $('#poTxt').html($('#PO' + arg).text());
                $('#colorTxt')");
            WriteLiteral(@".html($('#Color' + arg).text());
                $('#cutQuantityTxt').html($('#CutQuantity' + arg).text());
                $('#currentQuantityTxt').html($('#POCunt' + arg).text());
                $('#currentQuantityNumber').html($('#POCuntNumber' + arg).text());
                $(""#bagBarcodeBcodeTxt"").select();
            } else {
                $('#CounterID').html(selectedScanCounterId);
                $('#styleTxt').html(scannedBarcode.styleNo);
                $('#sheduleTxt').html(scannedBarcode.scheduleNo);
                $('#zFeatureTxt').html(scannedBarcode.zfeature);
                $('#poTxt').html(scannedBarcode.poNo);
                $('#colorTxt').html(scannedBarcode.colorNo);
                $('#cutQuantityTxt').html('-');
                $('#currentQuantityTxt').html('1');
                $('#currentQuantityNumber').html('1');
            }
            return; 
        }
    }

    function sentToDCAPdb(UserInList){
        refreshmsgBoxHeaderStyle();
        if (fl");
            WriteLiteral("ag) {\r\n                $.ajax({\r\n                    url: \'");
            EndContext();
            BeginContext(74061, 14, false);
#line 1274 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                     Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(74075, 7917, true);
            WriteLiteral(@"/BusinessLogics/UpdateBCScanData',
                    type: 'POST',
                    dataType: 'json',
                    async: false,
                    data: JSON.stringify(UserInList),
                    contentType: 'application/json; charset=utf-8',
                    beforeSend: function () {
                        $(""#ajaxBusy"").show();
                        flag = false;
                    },
                    complete: function () {
                        $(""#ajaxBusy"").hide();
                        flag = true;
                    },
                    success: function (data) {
                        //Check whether barcode is exist in the db
                        //console.log('Calling UpdateBCScanData API succeded.');
                        if (data[0] != null) {
                            //console.log('UpdateBCScanData API result received from DCAP db..');
                            //console.log(data[0]);
                            if (data[0].save");
            WriteLiteral(@"Successfull) {
                                finalizeBarcodeUpdate(data[0]);
                                EnableControllers();
                            } else {
                                $('#scannedStatusDataLabel').removeClass('control-datalabel-scannedstatus-pass');
                                $('#scannedStatusDataLabel').addClass('blinktext');
                                $('#scannedStatusDataLabel').addClass('control-datalabel-scannedstatus-fail');
                                $('#scannedStatusDataLabel').html('Fail');

                                scannedStatus = ScannedStatus.Fail;
                                msgBox.show('', data[0].responce[1], 'අවවාදයයි / Warning', 'APIERR01', 'Warning', function () {
                                    if (selectedScanOption == ScanOption.After || selectedScanOption == ScanOption.Continue) {
                                        $(""#barcodeBcodeTxt"").val("""");
                                        $(""#barcodeBcodeTxt"").f");
            WriteLiteral(@"ocus();
                                    }
                                    if (selectedScanOption == ScanOption.Continue || selectedScanOption == ScanOption.After) {
                                        isValidBarcode = false;
                                    }
                                });
                                EnableControllers();
                            }

                        } else {
                            $('#scannedStatusDataLabel').removeClass('control-datalabel-scannedstatus-pass');
                            $('#scannedStatusDataLabel').addClass('blinktext');
                            $('#scannedStatusDataLabel').addClass('control-datalabel-scannedstatus-fail');
                            $('#scannedStatusDataLabel').html('Fail');

                            scannedStatus = ScannedStatus.Fail;
                            msgBox.show('', 'Error in Save', 'අවවාදයයි / Warning', 'APIERR02', 'Warning', function () {
                          ");
            WriteLiteral(@"      if (selectedScanOption == ScanOption.After || selectedScanOption == ScanOption.Continue) {
                                    $(""#barcodeBcodeTxt"").val("""");
                                    $(""#barcodeBcodeTxt"").focus();
                                }
                                if (selectedScanOption == ScanOption.Continue || selectedScanOption == ScanOption.After) {
                                    isValidBarcode = false;
                                    EnableControllers();
                                }
                            });

                        }
                        isScanCompleted = true;
                        resetControls();
                        //loadPOcounterValues();
                        
                        goodQty = 0;
                        scrapQty = 0;
                        reworkQty = 0;
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        formatError");
            WriteLiteral(@"Message(jqXHR, errorThrown, ""Barcode"");
                        EnableControllers();
                    }
                });

            }
    }

    function finalizeBarcodeUpdate(data) {
        $('#scannedStatusDataLabel').removeClass('blinktext');
        $('#scannedStatusDataLabel').removeClass('control-datalabel-scannedstatus-fail');
        $('#scannedStatusDataLabel').addClass('control-datalabel-scannedstatus-pass');

        if (selectedTrxMode == TransactionMode.Good) {
            $('#scannedStatusDataLabel').html('Good');
        }
        else if (selectedTrxMode == TransactionMode.Scrap) {
            $('#scannedStatusDataLabel').html('Scrap');
        }
        else if (selectedTrxMode == TransactionMode.Rework) {
            $('#scannedStatusDataLabel').html('Rework');
        }

        scannedStatus = ScannedStatus.Pass;
        scannedCount += 1;
        $('#scannedCountDataLabel').html(scannedCount);

        if (selectedScanOption == ScanOption.After || selec");
            WriteLiteral(@"tedScanOption == ScanOption.Continue) {
            $(""#barcodeBcodeTxt"").focus();
        }

        if((new Date()).getHours() == previoushour) {
            $('#crntHGood').html(parseInt($('#crntHGood').html()) + data.enteredQtyGd);
            $('#crntHRework').html(parseInt($('#crntHScrap').html()) + data.enteredQtyRw);
            $('#crntHScrap').html(parseInt($('#crntHRework').html()) + data.enteredQtyScrap);
        } else {
            //$('#prevHGood').html($('#crntHGood').html());
            //$('#prevHRework').html($('#crntHRework').html());
            //$('#prevHScrap').html($('#crntHScrap').html());

            $('#crntHGood').html(data.enteredQtyGd);
            $('#crntHRework').html(data.enteredQtyRw);
            $('#crntHScrap').html(data.enteredQtyScrap);

            previoushour = (new Date()).getHours();
        }

        $('#totQty').html(data.enteredQtyGd + data.enteredQtyRw + data.enteredQtyScrap);

        $('#dataLabelScanCounter').html(data.scanCount);
");
            WriteLiteral(@"
        $(""#BAGBtnClear"").removeAttr(""disabled"");
        $('#bagBarcodeBcodeTxt').attr(""disabled"", ""disabled"");

        if(data.newCounter) {
            loadPOcounterValues();
        }

        if(data.isUpdateAvilable && data.counterId != 0) {
            updatePOcounterValues(data.counterId);
        }

        if(selectedWfConfig.poCounterNumber == 0) {
            loadPOcounterValues();
        }

        EnableControllers();
        ScanDataBackup = null;
    }

    function initializeControlEvents() {
        refreshmsgBoxHeaderStyle();
        $('#styleSearchBtn').click(function () {
            if (selectedScanOption != ScanOption.Non) {
                resetControls();
                setPageControlsStartupStatus();
            }
            styleSearchWindow = $(""#styleSearchWindow"").kendoWindow({
                width: ""80%"",
                height: ""60%"",
                title: ""Style Search"",
                actions: [
                    ""Close""
            ");
            WriteLiteral(@"    ],
                modal: true,
                resizable: false,
                draggable: false,
                pinned: true,
                activate: function () {
                    $(""#styleSearchWindowStyleTxt"").select();
                },
                close: onStyleSearchClose
            }).data(""kendoWindow"");

            styleSearchWindow.wrapper.find('.k-window-titlebar').css({
                'background-color': 'black',
                'font-size': '18px',
                'color': 'white'
            });

            styleSearchGrid = $(""#styleSearchGrid"").kendoGrid({
                autoBind: false,
                dataSource: {
                    transport: {
                        read: '");
            EndContext();
            BeginContext(81993, 14, false);
#line 1448 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                          Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(82007, 3281, true);
            WriteLiteral(@"/Lookup/GetStylesByStyleNo'
                    },
                    schema: {
                        model: {
                            fields: {
                                l1no: { type: ""string"" },
                                ref01: { type: ""string"" }
                            }
                        }
                    },
                    type: ""json""
                },
                height: ""75%"",
                width: ""90%"",
                scrollable: true,
                change: onChangeStyle,
                navigatable: true,
                selectable: ""multiple cell"",
                dataBound: function (e) {
                    var cell = this.tbody.find(""tr[role='row'] td:first"");
                    this.current(cell);
                },
                columns: [
                    { field: ""l1no"", title: ""Style No"", width: ""30%"" },
                    { field: ""ref01"", title: ""Description"", width: ""70%"" }
                ]
            }).da");
            WriteLiteral(@"ta(""kendoGrid"");

            var arrows = [38, 40];
            styleSearchGrid.table.on(""keydown"", function (e) {
                if (arrows.indexOf(e.keyCode) >= 0) {
                    setTimeout(function () {
                        styleSearchGrid.select($(""#rowSelection_active_cell"").closest(""tr""));
                    }, 10);
                }
            });

            styleSearchWindow.one(""activate"", function () {
                styleSearchGrid.resize();
            });
            styleSearchWindow.open().center();
            $(""#styleSearchWindowStyleTxt"").keydown(function (e) {
                if (e.keyCode == 13) {
                    styleSearchGrid.table.focus();
                }
            });
        });

        $(""#colorSearchBtn"").click(function () {
            if ($('#barcodeStyleTxt').val() == """") {
                msgBox.show('කරුණාකර ස්ටයිල් තෝරන්න.', 'Please select style.', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                    $(");
            WriteLiteral(@"'#styleSearchBtn').focus();
                });
                return;
            }
            selectedColor = null;
            colorSearchWindow = $(""#colorSearchWindow"").kendoWindow({
                width: ""80%"",
                height: ""60%"",
                title: ""Color Search"",
                visible: false,
                actions: [
                    ""Close""
                ],
                modal: true,
                resizable: false,
                draggable: false,
                pinned: true,
                activate: function () {
                    $(""#colorSearchWindowColorTxt"").select();
                },
                open: function (e) { $(""html, body"").css(""overflow"", ""hidden""); },
                close: onColorSearchClose
            }).data(""kendoWindow"");

            colorSearchWindow.wrapper.find('.k-window-titlebar').css({
                'background-color': 'black',
                'font-size': '18px',
                'color': 'white'
    ");
            WriteLiteral("        });\r\n\r\n            colorSearchGrid = $(\"#colorSearchGrid\").kendoGrid({\r\n                autoBind: true,\r\n                dataSource: {\r\n                    transport: {\r\n                        read: \'");
            EndContext();
            BeginContext(85289, 14, false);
#line 1533 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                          Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(85303, 3065, true);
            WriteLiteral(@"/Lookup/GetColorsByStylesNo?Style=' + selectedStyleNo,
                    },
                    schema: {
                        model: {
                            fields: {
                                l4no: { type: ""string"" },
                                l4desc: { type: ""string"" }
                            }
                        }
                    },
                    type: ""json""
                },
                height: ""75%"",
                width: ""90%"",
                scrollable: true,
                change: onChangeColor,
                navigatable: true,
                selectable: ""multiple cell"",
                dataBound: function (e) {
                    var cell = this.tbody.find(""tr[role='row'] td:first"");
                    this.current(cell);
                },
                columns: [
                    { field: ""l4no"", title: ""Color No"", width: ""30%"" },
                    { field: ""l4desc"", title: ""Description"", width: ""70%"" }
       ");
            WriteLiteral(@"         ]
            }).data(""kendoGrid"");

            var arrows = [38, 40];
            colorSearchGrid.table.on(""keydown"", function (e) {
                if (arrows.indexOf(e.keyCode) >= 0) {
                    setTimeout(function () {
                        colorSearchGrid.select($(""#rowSelection_active_cell"").closest(""tr""));
                    }, 10);
                }
            });

            colorSearchWindow.one(""activate"", function () {
                colorSearchGrid.resize();
            });
            colorSearchWindow.open().center();
            $(""#colorSearchWindowColorTxt"").keydown(function (e) {
                if (e.keyCode == 13) {
                    colorSearchGrid.table.focus();
                }
            });
        });

        $(""#scrapReasonSearchBtn"").click(function () {
            scrapReasonSearchWindow = $(""#scrapReasonSearchWindow"").kendoWindow({
                width: ""80%"",
                height: ""60%"",
                title: ""Scrap ");
            WriteLiteral(@"Reason Search"",
                visible: false,
                actions: [
                    ""Close""
                ],
                modal: true,
                resizable: false,
                draggable: false,
                pinned: true,
                activate: function () {
                    $(""#scrapReasonSearchWindowScrapTxt"").select();
                },
                open: function (e) { $(""html, body"").css(""overflow"", ""hidden""); },
                close: onScrapReasonSearchClose
            }).data(""kendoWindow"");

            scrapReasonSearchWindow.wrapper.find('.k-window-titlebar').css({
                'background-color': 'black',
                'font-size': '18px',
                'color': 'white'
            });

            scrapReasonSearchGrid = $(""#scrapReasonSearchGrid"").kendoGrid({
                autoBind: true,
                dataSource: {
                    transport: {
                        read: {
                            url: '");
            EndContext();
            BeginContext(88369, 14, false);
#line 1612 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(88383, 4124, true);
            WriteLiteral(@"/Lookup/GetRejectReasons',
                            type: 'GET',
                            dataType: 'json',
                            async: false,
                            contentType: 'application/json; charset=utf-8'
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                rrid: { type: ""string"" },
                                scode: { type: ""string"" },
                                rrname: { type: ""string"" },
                                rrdesc: { type: ""string"" },
                                rrdescSin: { type: ""string"" },
                                rrdescTem: { type: ""string"" }
                            }
                        }
                    }
                },
                height: ""75%"",
                width: ""90%"",
                scrollable: true,
                change: onChangeScrapReason,
                navi");
            WriteLiteral(@"gatable: true,
                selectable: ""multiple cell"",
                dataBound: function (e) {
                    var cell = this.tbody.find(""tr[role='row'] td:first"");
                    this.current(cell);
                },
                columns: [
                    { field: ""rrid"", title: ""Scrap Reason Id"", hidden: true },
                    { field: ""scode"", title: ""Short Code"", width: ""20%"" },
                    { field: ""rrname"", title: ""Scrap Reason Name"", width: ""20%"" },
                    { field: ""rrdesc"", title: ""Scrap Reason Description"", width: ""20%"" },
                    { field: ""rrdescSin"", title: ""Scrap Reason Sin"", width: ""20%"" },
                    { field: ""rrdescTem"", title: ""Scrap Reason Tam"", width: ""20%"" }
                ]
            }).data(""kendoGrid"");

            var arrows = [38, 40];
            scrapReasonSearchGrid.table.on(""keydown"", function (e) {
                if (arrows.indexOf(e.keyCode) >= 0) {
                    setTimeout(func");
            WriteLiteral(@"tion () {
                        scrapReasonSearchGrid.select($(""#rowSelection_active_cell"").closest(""tr""));
                    }, 10);
                }
            });

            scrapReasonSearchWindow.one(""activate"", function () {
                scrapReasonSearchGrid.resize();
            });
            scrapReasonSearchWindow.open().center();
            $(""#scrapReasonSearchWindowScrapTxt"").keydown(function (e) {
                if (e.keyCode == 13) {
                    scrapReasonSearchGrid.table.focus();
                }
            });
            $(""#trxModeReworkBtn"").attr(""disabled"", ""disabled"");
            $(""#trxModeGoodBtn"").attr(""disabled"", ""disabled"");

        });
        //Added following function //Nalinda
        // Rework Reason selection pannel 
        $(""#reworkReasonSearchBtn"").click(function () {
            defectOppSearchWindow = $(""#defectOppSearchWindow"").kendoWindow({
                width: ""90%"",
                height: ""80%"",
                ");
            WriteLiteral(@"title: ""Defect Operation Search"",
                visible: false,
                actions: [
                    ""Close""
                ],
                modal: true,
                resizable: false,
                draggable: false,
                pinned: true,
                activate: function () {
                    $(""#defectOppSearchWindowTxt"").select();
                },
                open: function (e) { $(""html, body"").css(""overflow"", ""hidden""); },
                close: onDefectOppsSearchClose
            }).data(""kendoWindow"");

            defectOppSearchWindow.wrapper.find('.k-window-titlebar').css({
                'background-color': 'red',
                'font-size': '18px',
                'color': 'white'
            });

            // GetDefectOpps();
            defectOppSearchGrid = $(""#defectOppSearchGrid"").kendoGrid({
                autoBind: true,
                dataSource: {
                    transport: {
                        read: {
      ");
            WriteLiteral("                      url: \'");
            EndContext();
            BeginContext(92508, 14, false);
#line 1708 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(92522, 6942, true);
            WriteLiteral(@"/Lookup/GetDefectOperatios',
                            type: 'GET',
                            dataType: 'json',
                            async: false,
                            contentType: 'application/json; charset=utf-8'
                        }
                    },
                    schema: {
                        model: {
                            fields: {
                                dopsId: { type: ""string"" },
                                dopsScode: { type: ""string"" },
                                dopsName: { type: ""string"" },
                                dopsDesc: { type: ""string"" }
                            }
                        }
                    }
                },
                height: ""80%"",
                width: ""90%"",
                scrollable: true,
                change: onChangeDefectOpps,
                navigatable: true,
                selectable: ""multiple cell"",
                dataBound: function (e) {
            ");
            WriteLiteral(@"        var cell = this.tbody.find(""tr[role='row'] td:first"");
                    this.current(cell);
                },
                columns: [
                    { field: ""dopsId"", title: ""Defect Opp Id"", hidden: true },
                    { field: ""dopsScode"", title: ""Short Code"", width: ""20%"" },
                    { field: ""dopsName"", title: ""Defect Opp Name"", width: ""20%"" },
                    { field: ""dopsDesc"", title: ""Defect Opp Description"", width: ""20%"" }
                ]
            }).data(""kendoGrid"");

            var arrows = [38, 40];
            defectOppSearchGrid.table.on(""keydown"", function (e) {
                if (arrows.indexOf(e.keyCode) >= 0) {
                    setTimeout(function () {
                        defectOppSearchGrid.select($(""#rowSelection_active_cell"").closest(""tr""));
                    }, 10);
                }
            });

            defectOppSearchWindow.one(""activate"", function () {
                defectOppSearchGrid.resize();");
            WriteLiteral(@"
            });
            defectOppSearchWindow.open().center();
            $(""#defectOppSearchWindowTxt"").keydown(function (e) {
                if (e.keyCode == 13) {
                    defectOppSearchGrid.table.focus();
                }
            });
            $(""#trxModeScrapBtn"").attr(""disabled"", ""disabled"");
            $(""#trxModeGoodBtn"").attr(""disabled"", ""disabled"");
        });

        //Styles are searched in Style Search window on the fly
        $(""#styleSearchWindowStyleTxt"").keyup(function () {

            $('#barcodeBcodeTxt').val("""");
            if ($(""#styleSearchWindowStyleTxt"").val().length > 0) {
                styleSearchGrid.dataSource.read({ Style: $(""#styleSearchWindowStyleTxt"").val() });
            } else {
                styleSearchGrid.dataSource.data([]);
            }
        });

        //Colors are searched in Color Search window on the fly
        $(""#colorSearchWindowColorTxt"").keyup(function () {

            $('#barcodeBcodeTxt').v");
            WriteLiteral(@"al("""");
            colorSearchGrid.dataSource.read({ Color: $(""#colorSearchWindowColorTxt"").val() });
        });

        //Scrap reason are searched in Scrap reason key change
        $(""#scrapReasonSearchWindowScrapTxt"").keyup(function () {
            scrapReasonSearchGrid.dataSource.read({ RRCode: $(""#scrapReasonSearchWindowScrapTxt"").val() });
        });

        //Rework reason are searched in Rework reason key change
        $(""#reworkReasonSearchWindowScrapTxt"").keyup(function () {
            reworkReasonSearchGrid.dataSource.read({ SCode: $(""#reworkReasonSearchWindowScrapTxt"").val() });
            $(""#ddlScrapReason"").data(""kendoDropDownList"").text("""");
        });

        //Defect Operation are searched in Defect Operation key change
        $(""#defectOppSearchWindowTxt"").keyup(function () {
            defectOppSearchGrid.dataSource.read({ DOpsSCode: $(""#defectOppSearchWindowTxt"").val() });

        });

        $(""#barcodeBcodeTxt"").keydown(function (e) {
            if");
            WriteLiteral(@" (e.keyCode == 13) {
              
                if ($('#barcodeBcodeTxt').val() != """"){
                    checkBarcodeIsValid();
                    return;         
                }   
            }
        });

        $('#trxModeGoodBtn').click(function () {
            selectTrxModeGood();
            if (selectedScanOption == ScanOption.After && isValidBarcode) {
                updateBarcodeScan();
                return;
            }
            if (selectedScanOption == ScanOption.Continue) {
                $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                $(""#barcodeBcodeTxt"").focus();
                return;
            }
        });

        $('#trxModeScrapBtn').click(function () {
            selectTrxModeScrap();
            if (selectedScanOption == ScanOption.After && isValidBarcode) {
                updateBarcodeScan();
                return;
            }
            if (selectedScanOption == ScanOption.Continue) {
                $(""#barco");
            WriteLiteral(@"deBcodeTxt"").focus();
                if ($(""#barcodeBcodeTxt"").val() != """" && selectedScanAction != Action.Reverse) {
                    checkBarcodeIsValid();
                }
            }
        });

        //When Rework button clicked
        $('#trxModeReworkBtn').click(function () {
            selectTrxModeRework();
            if (selectedScanOption == ScanOption.After && isValidBarcode) {
                updateBarcodeScan();
                return;
            }
            if (selectedScanOption == ScanOption.Continue) {
                $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                $(""#barcodeBcodeTxt"").focus();
                return;
            }
        });


        $('#scanActionAddBtn').click(function () {
            selectActionAdd();
            if (selectedScanOption == ScanOption.Continue) {
                $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                $(""#barcodeBcodeTxt"").focus();
                return;
            }
  ");
            WriteLiteral(@"      });

        $('#scanActionReverseBtn').click(function () {
            selectActionReverse();
            if (selectedScanOption == ScanOption.Continue) {
                $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                $(""#barcodeBcodeTxt"").focus();
                return;
            }
        });

        $('#resetBtn').click(function () {
            resetControls();
            $('#lastBarcodeDataLabel').html("""");
            $('#lastTxMode').html("""");
            $('#lastAction').html("""");
            $('#scannedStatusDataLabel').html("""");
        });

        $('#resetCounterBtn').click(function () {
            //console.log('Calling ResetCounter API by wfdepinstId:' + clientconfig.wfdepinstId);
            $.ajax({
                url: '");
            EndContext();
            BeginContext(99465, 14, false);
#line 1882 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(99479, 9766, true);
            WriteLiteral(@"/BusinessLogics/ResetCounter?wfdepinstId=' + clientconfig.wfdepinstId,
                type: 'POST',
                dataType: 'json',
                //async: false,
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    $(""#ajaxBusy"").show();
                },
                complete: function () {
                    $(""#ajaxBusy"").hide();
                },
                success: function (date) {
                    //console.log('Calling ResetCounter API succeded.');
                    $('#dataLabelScanCounter').html(""0"");
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                }
            });
        });

        var data = [];
        $(""#ddlMainOperation"").kendoDropDownList({
            dataTextField: ""text"",
            dataValueField: ""value"",
            dataSource: data,
       ");
            WriteLiteral(@"     index: 0,

        });

        //PO Counter Bag Controllers: START
        $('#BAGBtnClear').click(function () {
            DisableInputs()
            var validation = false;
            var bagqty = parseInt($(""#bagSizeTxt"").val());
            var currentqty = parseInt($(""#currentQuantityNumber"").html());

            //console.log(bagqty, currentqty);
            if (Number.isInteger($('#bagSizeTxt').val())) {
                msgBox.show('නීති විරෝධී අක්ෂර.', 'Illegal characters in path. (Bag Size)', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                $('#bagSizeTxt').focus();
                validationSuccess = false;
                $(""#BAGBtnReset"").removeAttr('disabled');
                });
                return;
            }
            

            if(bagqty > currentqty) {
                msgBoxConfirm.show('ඔබට පුරවා නැති බෑගය වසා දැමීමට අවශ්‍යද?.',
                                'Do you want to close the unfilled bag.',
                     ");
            WriteLiteral(@"           'තහවුරු කරන්න / Confirm',
                                'BS24',
                                'Confirm',
                                function () { 
                                        closeTheBag();
                                        validation = true;
                                        EnableInputs();
                                    },
                                function () { 
                                    validation = false;
                                    EnableInputs();
                                    return;
                                });

            } else if(0 >= currentqty) {
                msgBox.show('බෑගයේ ප්‍රමාණය 0 විය. කරුණාකර පරීක්ෂා කරන්න.','The bag quantity was 0. Please check.','තහවුරු කරන්න / Confirm','BS24','Confirm',null);
            } else {
                closeTheBag();
                EnableInputs();
            }
        });

        $('#BAGBtnReset').click(function () {
            DisableInputs()");
            WriteLiteral(@"
            var bagqty = parseInt($(""#bagSizeTxt"").val());

            if(isNaN($(""#bagSizeTxt"").val())) {
                msgBox.show('නීති විරෝධී අක්ෂර.', 'Illegal characters in path. (Bag Size)', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                $('#bagBarcodeBcodeTxt').focus();
                validationSuccess = false;
                $(""#BAGBtnReset"").removeAttr('disabled');
                });
                return;
            }

            var bagbarcode = $(""#bagBarcodeBcodeTxt"").val();

            if(isNaN($(""#bagBarcodeBcodeTxt"").val())) {
                msgBox.show('නීති විරෝධී අක්ෂර.', 'Illegal characters in path. (Bag Barcode)', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                $('#bagBarcodeBcodeTxt').focus();
                validationSuccess = false;
                $(""#BAGBtnReset"").removeAttr('disabled');
                });
                return;
            }

            var currentqty = parseInt($(""#currentQuantity");
            WriteLiteral(@"Number"").html());
            var cutqty = $(""#cutQuantityTxt"").html() == ""-"" ? ""-"" : parseInt($(""#cutQuantityTxt"").html());

            if ($(""#CounterID"").html() == ""new counter"") {
                currentqty = 0;
            }
            //console.log(""QUANTITES for bag: "", bagqty, currentqty, cutqty);

            if((cutqty != ""-"" ? bagqty <= cutqty : true)) {
                if(bagqty > currentqty) {
                    var UserInList = [];
                    var validationSuccess = true;
                    if( selectedScanCounterId == ""new counter"" ){
                        if (bagbarcode == """") {
                            msgBox.show('කරුණාකර තීරු කේතය ඇතුළත් කරන්න.', 'Please enter the barcode.', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                            $('#bagBarcodeBcodeTxt').focus();
                            validationSuccess = false;
                            $(""#BAGBtnReset"").removeAttr('disabled');
                            });
          ");
            WriteLiteral(@"                  return;
                        }
                        if (bagqty == """" || bagqty == 0) {
                            msgBox.show('කරුණාකර නිවැරදි බෑග් ප්‍රමාණය ඇතුළත් කරන්න.', 'bag size error.', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                            $('#bagBarcodeBcodeTxt').focus();
                            validationSuccess = false;
                            $(""#BAGBtnReset"").removeAttr('disabled');
                            });
                            return;
                        }

                        var isbarcodevalid = checkForBagBarcodeExistence();
                        if(isbarcodevalid == false) {
                            msgBox.show('ඇතුළත් කළ තීරු කේතය දැනටමත් භාවිතා කර ඇත.', 'The entered barcode is already in used.', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                            $('#bagBarcodeBcodeTxt').focus();
                            validationSuccess = false;
                        ");
            WriteLiteral(@"    $(""#BAGBtnReset"").removeAttr('disabled');
                            });
                            return;
                        }

                        if(validationSuccess){
                            ScanDataBackup.BagBarCodeNo = $(""#bagBarcodeBcodeTxt"").val().replace(/\s/g, '');
                            ScanDataBackup.BagSize = $(""#bagSizeTxt"").val();
                            ScanDataBackup.CounterNumber = $(""#counterNumber"").val();

                            var UserInList = [];
                            UserInList.push(ScanDataBackup);

                            if(poCounterResetWindow != null) {
                                poCounterResetWindow.close();}
                            EnableInputs();

                            sentToDCAPdb(UserInList);
                            
                        }
                    }
                    else {
                        if(bagbarcode != null && bagbarcode != """") {
                            var");
            WriteLiteral(@" BagSize = $(""#bagSizeTxt"").val();
                            var counterNumber = $(""#counterNumber"").val();
                            var validationSuccess = true;
                            //console.log(BagSize, counterNumber,Number.isInteger(BagSize));
                            if (BagSize == """" || BagSize == 0) {
                                msgBox.show('කරුණාකර නිවැරදි බෑග් ප්‍රමාණය ඇතුළත් කරන්න.', 'bag size error.', 'අවවාදයයි / Warning', 'BS13', 'Warning', function () {
                                $('#bagSizeTxt').focus();
                                validationSuccess = false;
                                $(""#BAGBtnReset"").removeAttr('disabled');
                                });
                                return;
                            }

                            if(validationSuccess){
                                resetTheBag(BagSize, bagbarcode);
                                haltsystem = false;
                            }
                   ");
            WriteLiteral(@"     } else {
                            msgBox.show('බෑග් තීරු කේතය වලංගු එකක් නොවේ.', 'The bag barcode is not a valid one. allocation failed.', 'අවවාදයයි / Warning', 'BS13', 'Warning', null)
                            $(""#BAGBtnReset"").removeAttr('disabled'); 
                        }
                    }
                } else {
                    msgBox.show('නිර්වචනය කරන ලද බෑග් ප්‍රමාණ වත්මන් ප්‍රමාණයට වඩා අඩුය. වෙන් කිරීම අසාර්ථක විය.', 'Defined bag quantitiy is less than current quantitiy. allocation failed.', 'අවවාදයයි / Warning', 'BS13', 'Warning', null)
                    $(""#BAGBtnReset"").removeAttr('disabled');
                }
            } else {
                msgBox.show('නිර්වචනය කරන ලද බෑග් ප්‍රමාණය මැහුම් ප්‍රමාණවලට වඩා වැඩිය. වෙන් කිරීම අසාර්ථක විය.', 'Defined bag quantitiy is greater than sweing wip quantitiy. allocation failed.', 'අවවාදයයි / Warning', 'BS13', 'Warning', null)
                 $(""#BAGBtnReset"").removeAttr('disabled');
            }
        });
     ");
            WriteLiteral(@"   //PO Counter Bag Controllers: END

        $('#POBtnClear').click(function () {
            DisableInputs()
            msgBoxConfirm.show('ඔබට මෙම කවුන්ටරය වැසීමට අවශ්‍යද ?.',
                                'Do you want to close this counter ?.',
                                'තහවුරු කරන්න / Confirm',
                                'BS24',
                                'Confirm',
                                function () { 
                                        $.ajax({
                                            url: '");
            EndContext();
            BeginContext(109246, 14, false);
#line 2079 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                                             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(109260, 2240, true);
            WriteLiteral(@"/BusinessLogics/UpdatePOCounterForPO?CounterId=' + $(""#CounterID"").html() + '&Action=1&WfdepinstId=' + clientconfig.wfdepinstId,
                                            type: 'POST',
                                            dataType: 'json',
                                            //async: false,
                                            contentType: 'application/json; charset=utf-8',
                                            beforeSend: function () {
                                                $(""#ajaxBusy"").show();
                                            },
                                            complete: function () {
                                                $(""#ajaxBusy"").hide();
                                            },
                                            success: function (response) {
                                                //console.log('Calling Remove PO Counter API succeded.');
                                                if(!res");
            WriteLiteral(@"ponse){
                                                    msgBox.show('වෙන් කිරීම අසාර්ථක විය.', 'Update failed.', 'අවවාදයයි / Warning', 'BS13', 'Warning', null)
                                                }
                                                if(poCounterResetWindow != null) {
                                                    poCounterResetWindow.close();}
                                                EnableInputs();
                                                loadPOcounterValues();
                                            },
                                            error: function (jqXHR, textStatus, errorThrown) {
                                                formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                                            }
                                        });
                                    },
                                function () { 
                                    EnableInputs();
                         ");
            WriteLiteral("           return;\r\n                                });\r\n        });\r\n\r\n        $(\'#POBtnReset\').click(function () {\r\n            DisableInputs();\r\n            $.ajax({\r\n                url: \'");
            EndContext();
            BeginContext(111501, 14, false);
#line 2114 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(111515, 2311, true);
            WriteLiteral(@"/BusinessLogics/UpdatePOCounterForPO?CounterId=' + $(""#CounterID"").html() + '&Action=2&WfdepinstId=' + clientconfig.wfdepinstId,
                type: 'POST',
                dataType: 'json',
                //async: false,
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    $(""#ajaxBusy"").show();
                },
                complete: function () {
                    $(""#ajaxBusy"").hide();
                },
                success: function (response) {
                    //console.log('Calling Remove PO Counter API succeded.');
                    if(!response){
                        msgBox.show('වෙන් කිරීම අසාර්ථක විය.', 'Update failed.', 'අවවාදයයි / Warning', 'BS13', 'Warning', null)
                    }
                    if(poCounterResetWindow != null) {
                        poCounterResetWindow.close();}
                        EnableInputs();
                        loadPOcounterValues();
  ");
            WriteLiteral(@"              },
                error: function (jqXHR, textStatus, errorThrown) {
                    formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                }
            });
        });

        //On Bag Barcode value set
        $(""#bagBarcodeBcodeTxt"").keydown(function (e) {
            if (e.keyCode == 13) {
                $(""#bagBarcodeBcodeTxt"").attr('disabled', 'disabled');
                $(""#bagSizeTxt"").focus();
                $(""#bagSizeTxt"").select();
            }
        });
    }

    //Counter Window Controllers: START
    function DisableInputs() {
        $(""#BAGBtnClear"").attr('disabled', 'disabled');
        $(""#BAGBtnReset"").attr('disabled', 'disabled');

        $(""#POBtnClear"").attr('disabled', 'disabled');
        $(""#POBtnReset"").attr('disabled', 'disabled');
    }

    function EnableInputs() {
        $(""#BAGBtnClear"").removeAttr('disabled');
        $(""#BAGBtnReset"").removeAttr('disabled');

        $(""#POBtnClear"").removeAttr('disabled");
            WriteLiteral(@"');
        $(""#POBtnReset"").removeAttr('disabled');
    }
    //Counter Window Controllers: END

    function checkForBagBarcodeExistence () {
        if($('#bagBarcodeBcodeTxt').val() != """" && sacanComplete) {
            $.ajax({
                url: '");
            EndContext();
            BeginContext(113827, 14, false);
#line 2172 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(113841, 708, true);
            WriteLiteral(@"/Lookup/CheckForBagBarcode?bagbarcode=' + $('#bagBarcodeBcodeTxt').val(),
                type: 'GET',
                dataType: 'json',
                contentType: 'application/json',
                beforeSend: function () {
                    $(""#ajaxBusy"").show();
                },
                complete: function () {
                    $(""#ajaxBusy"").hide();
                },
                success: function (response) {
                    return response.nobarcodes;
                },

            });
        }
    }
    // Added following function //Nalinda
    // Defect Operation selection pannel
    function closeTheBag() {
         $.ajax({
            url: '");
            EndContext();
            BeginContext(114550, 14, false);
#line 2193 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(114564, 1658, true);
            WriteLiteral(@"/BusinessLogics/UpdatePOCounter?CounterId=' + selectedScanCounterId + '&Action=1&BagSize=' + $(""#bagSizeTxt"").val() + '&BagBarcode=' + $(""#bagBarcodeBcodeTxt"").val() + '&WfdepinstId=' + clientconfig.wfdepinstId + '&WFId=' + clientconfig.wfId + '&OperationCode=' + clientconfig.opCode1,
            type: 'POST',
            dataType: 'json',
            //async: false,
            contentType: 'application/json; charset=utf-8',
            beforeSend: function () {
                $(""#ajaxBusy"").show();
            },
            complete: function () {
                $(""#ajaxBusy"").hide();
            },
            success: function (data) {
                //console.log('Calling Remove PO Counter API succeded.');
                if(!data.saveSuccessfull){
                    msgBox.show('වෙන් කිරීම අසාර්ථක විය.', 'Update failed.', 'අවවාදයයි / Warning', 'BS13', 'Warning', null)
                }

                if(data.message){
                    msgBox.show('', data.responce, 'අවවාදයයි ");
            WriteLiteral(@"/ Warning', 'APIERR01', 'Warning', null);
                }

                loadPOcounterValues();
                haltsystem = false;
                if(poCounterResetWindow != null) {
                    poCounterResetWindow.close();}
                EnableInputs();
                
            },
            error: function (jqXHR, textStatus, errorThrown) {
                formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
            }
        });
    }

    function resetTheBag(BagSize, bagbarcode) {
        //console.log(bagbarcode, BagSize, selectedScanCounterId);
        $.ajax({
            url: '");
            EndContext();
            BeginContext(116223, 14, false);
#line 2230 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(116237, 2342, true);
            WriteLiteral(@"/BusinessLogics/UpdatePOCounter?CounterId=' + selectedScanCounterId + '&Action=2&BagSize=' + BagSize + '&BagBarcode=' + bagbarcode + '&WfdepinstId=' + clientconfig.wfdepinstId + '&WFId=' + clientconfig.wfId + '&OperationCode=' + clientconfig.opCode1,
            type: 'POST',
            dataType: 'json',
            //async: false,
            contentType: 'application/json; charset=utf-8',
            beforeSend: function () {
                $(""#ajaxBusy"").show();
            },
            complete: function () {
                $(""#ajaxBusy"").hide();
            },
            success: function (response) {
                //console.log('Calling Reset PO Counter API succeded.');
                if(!response.saveSuccessfull){
                    msgBox.show('වෙන් කිරීම අසාර්ථක විය.', 'Update failed.', 'අවවාදයයි / Warning', 'BS13', 'Warning', null)
                }
                    
                loadPOcounterValues();
                poCounterResetWindow.close();
            },
 ");
            WriteLiteral(@"           error: function (jqXHR, textStatus, errorThrown) {
                formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
            }
        });
    }

    function openReworkReasonPannel(arg) {
        reworkReasonSearchWindow = $(""#reworkReasonSearchWindow"").kendoWindow({
            width: ""90%"",
            height: ""90%"",
            title: ""Rework Reason Search"",
            visible: false,
            actions: [
                ""Close""
            ],
            modal: true,
            resizable: false,
            draggable: false,
            pinned: true,
            activate: function () {
                $(""#reworkReasonSearchWindowScrapTxt"").select();
            },
            open: function (e) { $(""html, body"").css(""overflow"", ""hidden""); },
            close: onReworkReasonSearchClose
        }).data(""kendoWindow"");
        reworkReasonSearchWindow.wrapper.find('.k-window-titlebar').css({
            'background-color': 'black',
            'font-size': '18");
            WriteLiteral(@"px',
            'color': 'white'
        });
        GetRejectCat();
        reworkReasonSearchGrid = $(""#reworkReasonSearchGrid"").kendoGrid({
            autoBind: true,
            dataSource: {
                transport: {
                    read: {
                        url: '");
            EndContext();
            BeginContext(118580, 14, false);
#line 2286 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                         Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(118594, 14145, true);
            WriteLiteral(@"/Lookup/GetReworkReasonsByCategory?RRType=2&DopsId=' + selectedDefectOpp.dopsId,
                        type: 'GET',
                        dataType: 'json',
                        async: false,
                        contentType: 'application/json; charset=utf-8'
                    }
                },
                schema: {
                    model: {
                        fields: {
                            rrid: { type: ""string"" },
                            scode: { type: ""string"" },
                            rrname: { type: ""string"" },
                            rrdesc: { type: ""string"" },
                            rrdescSin: { type: ""string"" },
                            rrdescTem: { type: ""string"" }
                        }
                    }
                }
            },
            height: ""85%"",
            width: ""70%"",
            scrollable: true,
            change: onChangeReworkReason,
            navigatable: true,
            selectable: """);
            WriteLiteral(@"multiple cell"",
            dataBound: function (e) {
                var cell = this.tbody.find(""tr[role='row'] td:first"");
                this.current(cell);
            },
            columns: [
                { field: ""rrid"", title: ""Rework Reason Id"", hidden: true },
                { field: ""scode"", title: ""Short Code"", width: ""20%"" },
                { field: ""rrname"", title: ""Rework Reason Name"", width: ""20%"" },
                { field: ""rrdesc"", title: ""Rework Reason Description"", width: ""20%"" },
                { field: ""rrdescSin"", title: ""Rework Reason Sin"", width: ""20%"", hidden: true },
                { field: ""rrdescTem"", title: ""Rework Reason Tam"", width: ""20%"", hidden: true }
            ]
        }).data(""kendoGrid"");
        var arrows = [38, 40];
        reworkReasonSearchGrid.table.on(""keydown"", function (e) {
            if (arrows.indexOf(e.keyCode) >= 0) {
                setTimeout(function () {
                    reworkReasonSearchGrid.select($(""#rowSelection_act");
            WriteLiteral(@"ive_cell"").closest(""tr""));
                }, 10);
            }
        });
        reworkReasonSearchWindow.one(""activate"", function () {
            reworkReasonSearchGrid.resize();
        });
        reworkReasonSearchWindow.open().center();
        $(""#reworkReasonSearchWindowScrapTxt"").keydown(function (e) {
            if (e.keyCode == 13) {
                reworkReasonSearchGrid.table.focus();
            }
        });
        $(""#trxModeScrapBtn"").attr(""disabled"", ""disabled"");
        $(""#trxModeGoodBtn"").attr(""disabled"", ""disabled"");

    }

    function resetToStartUp() {
        if (selectedScanOption != ScanOption.Non) {
            if (selectedScanOption == ScanOption.After) {
                $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
                $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
                $('#trxModeScrapBtn').removeClass('bs-buttonPressed-scrap');
                $('#trxModeReworkBtn').addClass('bs-btn-primary-rewo");
            WriteLiteral(@"rk');
                $('#trxModeGoodBtn').addClass('bs-btn-primary-good');
                $('#trxModeScrapBtn').addClass('bs-btn-primary-scrap');
                $(""#trxModeReworkBtn"").attr(""disabled"", ""disabled"");
                $(""#trxModeGoodBtn"").attr(""disabled"", ""disabled"");
                $(""#trxModeScrapBtn"").attr(""disabled"", ""disabled"");

                $('#scanActionReverseBtn').removeClass('bs-buttonPressed-action');
                $('#scanActionAddBtn').addClass('bs-buttonPressed-action');
                $('#scanActionAddBtn').removeClass('bs-btn-primary-action');
                $('#scanActionReverseBtn').addClass('bs-btn-primary-action');

                $('#divScrapReason').hide();
                $(""#barcodeScrapReasonTxt"").val("""");

                $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                $(""#barcodeBcodeTxt"").val("""");
                $(""#barcodeBcodeTxt"").focus();

                selectedTrxMode = TransactionMode.Non;
                selectedS");
            WriteLiteral(@"crapReason = Answer.Null;
                selectedFunction = Answer.Null;
                setPageControlsStartupStatus();
            }

            else if (selectedScanOption == ScanOption.Continue) {
                $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
                $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
                $('#trxModeScrapBtn').removeClass('bs-buttonPressed-scrap');
                $('#trxModeReworkBtn').addClass('bs-btn-primary-rework');
                $('#trxModeGoodBtn').addClass('bs-btn-primary-good');
                $('#trxModeScrapBtn').addClass('bs-btn-primary-scrap');

                $('#scanActionReverseBtn').removeClass('bs-buttonPressed-action');
                $('#scanActionAddBtn').addClass('bs-buttonPressed-action');
                $('#scanActionAddBtn').removeClass('bs-btn-primary-action');
                $('#scanActionReverseBtn').addClass('bs-btn-primary-action');

                $('#divScrapReason').hid");
            WriteLiteral(@"e();
                $(""#barcodeScrapReasonTxt"").val("""");

                $(""#barcodeBcodeTxt"").attr(""disabled"", ""disabled"");
                $(""#barcodeBcodeTxt"").val("""");
                $('#trxModeGoodBtn').focus();

                selectedTrxMode = TransactionMode.Non;
                selectedScrapReason = Answer.Null;
                selectedFunction = Answer.Null;
                setPageControlsStartupStatus();
            }
        }
    }

    function resetControls() {
        //Scan Option is set to Before but user has not selected Scan Action and the Transaction Mode                 

        $('#lastTxMode').html(searchRefractive(selectedTrxMode, TransactionMode));
        $('#lastAction').html(searchRefractive(selectedScanAction, Action));

        if (selectedScanOption == ScanOption.Before) {
            $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
            $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
            $('#trxModeScrapBtn')");
            WriteLiteral(@".removeClass('bs-buttonPressed-scrap');
            $('#trxModeReworkBtn').addClass('bs-btn-primary-rework');
            $('#trxModeGoodBtn').addClass('bs-btn-primary-good');
            $('#trxModeScrapBtn').addClass('bs-btn-primary-scrap');

            $('#scanActionReverseBtn').removeClass('bs-buttonPressed-action');
            $('#scanActionAddBtn').removeClass('bs-buttonPressed-action');
            $('#scanActionReverseBtn').addClass('bs-btn-primary-action');
            $('#scanActionAddBtn').addClass('bs-btn-primary-action');

            $('#divScrapReason').hide();
            $(""#barcodeScrapReasonTxt"").val("""");
            $(""#barcodeBcodeTxt"").attr(""disabled"", ""disabled"");
            $(""#barcodeBcodeTxt"").val("""");


            selectedTrxMode = TransactionMode.Non;
            selectedScrapReason = Answer.Null;
            selectedFunction = Answer.Null;
        }
        else if (selectedScanOption == ScanOption.After) {
            $('#dataLabelzFeature').html("""");
  ");
            WriteLiteral(@"          $('#poDataLabel').html("""");
            $('#scheduleDataLabel').html("""");
            $('#sizeDataLabel').html("""");
            $('#bcColorDataLabel').html("""");
            $('#ShadeLotPatt').html("""");        


            $('#trxModeReworkBtn').removeClass('bs-buttonPressed-rework');
            $('#trxModeGoodBtn').removeClass('bs-buttonPressed-good');
            $('#trxModeScrapBtn').removeClass('bs-buttonPressed-scrap');
            $('#trxModeReworkBtn').addClass('bs-btn-primary-rework');
            $('#trxModeGoodBtn').addClass('bs-btn-primary-good');
            $('#trxModeScrapBtn').addClass('bs-btn-primary-scrap');
            $(""#trxModeReworkBtn"").attr(""disabled"", ""disabled"");
            $(""#trxModeGoodBtn"").attr(""disabled"", ""disabled"");
            $(""#trxModeScrapBtn"").attr(""disabled"", ""disabled"");

            $('#scanActionReverseBtn').removeClass('bs-buttonPressed-action');
            $('#scanActionAddBtn').addClass('bs-buttonPressed-action');
            $('#");
            WriteLiteral(@"scanActionAddBtn').removeClass('bs-btn-primary-action');
            $('#scanActionReverseBtn').addClass('bs-btn-primary-action');

            $('#divScrapReason').hide();
            $(""#barcodeScrapReasonTxt"").val("""");

            $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
            $(""#barcodeBcodeTxt"").val("""");
            $(""#barcodeBcodeTxt"").focus();
            $(""#scrapReasonDataLabel"").val("""");
            $(""#defectOpperation"").val("""");

            isValidBarcode = false;
            selectedTrxMode = TransactionMode.Non;
            selectedScrapReason = Answer.Null;
            selectedFunction = Answer.Null;

            selectActionAdd();
        }
        else if (selectedScanOption == ScanOption.Continue) {
            if (!isScanCompleted) {
                $('#dataLabelzFeature').html("""");
                $('#poDataLabel').html("""");
                $('#scheduleDataLabel').html("""");
                $('#sizeDataLabel').html("""");
                $('#bcColorData");
            WriteLiteral(@"Label').html("""");
                $('#ShadeLotPatt').html("""");        
            }
            $('#divScrapReason').hide();
            $(""#barcodeScrapReasonTxt"").val("""");
            $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
            selectedScrapReason = Answer.Null;
            isValidBarcode = false;

            $(""#trxModeReworkBtn"").removeAttr(""disabled"");
            $(""#trxModeGoodBtn"").removeAttr(""disabled"");
            $(""#trxModeScrapBtn"").removeAttr(""disabled"");

            $(""#barcodeBcodeTxt"").val("""");
            $(""#barcodeBcodeTxt"").select();
            $(""#barcodeBcodeTxt"").focus();
        }
        isScanCompleted = false;

    }

    function populatePermissionList() {

        userPermissionList = JSON.parse(sessionStorage.getItem(""UserPermissionList""));
        //console.log('Called populatePermissionList method. List is..');
        //console.log(userPermissionList);
        var uniqueUserPermissionList = [];
        for (i = 0; i < userPermissi");
            WriteLiteral(@"onList.length; i++) {
            if (uniqueUserPermissionList.indexOf(userPermissionList[i].funcName) === -1) {
                uniqueUserPermissionList.push(userPermissionList[i].funcName);
                $('#userpermissionlist').append('<div class=""row""><label class=""control-datalabel"">' + userPermissionList[i].funcName + '</label></div>');
            }
        }
    }

    function getSessionInfo() {
        isValidClient = sessionStorage.getItem(""IsValidClient"");
        clientconfig = JSON.parse(sessionStorage.getItem(""Clientconfig""));
        userPermissionList = JSON.parse(sessionStorage.getItem(""UserPermissionList""));
        clientIP = sessionStorage.getItem(""ClientIP"");
        txUser = JSON.parse(sessionStorage.getItem(""TxUser""));
        //console.log('Called getSessionInfo method. IsValidClient = ' + isValidClient);
    }

    function setPageControlsStartupStatus() {
        $('#trxModeBtnPanel').hide();
        $('#divScrapReason').hide();
        $('#scanActionButton').h");
            WriteLiteral(@"ide();
        $('#trxModeGoodBtn').hide();
        $('#trxModeScrapBtn').hide();
        $('#trxModeReworkBtn').hide();
        $('#scanActionAddBtn').hide();
        $('#scanActionReverseBtn').hide();
        $('#scannedCountDataLabel').html(scannedCount);
        $(""#barcodeBcodeTxt"").attr(""disabled"", ""disabled"");
        $('#scannedStatusDataLabel').html("""");
        $('#lastBarcodeDataLabel').html("""");
        $('#lastAction').html("""");
        $('#lastTxMode').html("""");

        //Added during ""After""
        $(""#barcodeStyleTxt"").val("""");
        $(""#styleDataLabel"").html("""");
        $(""#barcodeColorTxt"").val("""");
        $(""#colorDataLabel"").html("""");

        $(""#pocounterdiv"").hide();

        selectedStyle = null;
        selectedColor = null;
        selectedStyleNo = null;
        selectedStyleDesc = null;
        selectedScanCounterId = null;
    }    

    function setMainOperationVisibility() {
        if (clientconfig.teamId == 0 || clientconfig.teamId == null) {");
            WriteLiteral(@"
            $('#dvMainOpp').show();
        }
        else {
            $(""#ddlMainOperation"").data(""kendoDropDownList"").dataSource.data([]);
            $('#dvMainOpp').hide();
        }
    }

    function setClientConfigInfo() {
        $('#dataLabelFactory').html(clientconfig.facName);
        $('#dataLabelTeam').html(clientconfig.teamName + '-[' + clientconfig.wfdepinstId + ']');
        //$('#dataLabelOperation').html(clientconfig.operationName);
        $('#dataLabelOperation').html(clientconfig.operationName);
        $('#dataLabelClientIP').html(clientIP);

    }    

    function onChangeStyle(arg) {
        var row = $(this.select()).closest(""tr"");
        var dataItem = styleSearchGrid.dataItem(row);

        if (dataItem == null)
            return; 
        selectedStyle = dataItem;
        selectedStyleNo = dataItem.l1no;
        selectedStyleDesc = dataItem.ref01;

        // console.log('User selected style..');
        //console.log(selectedStyle);

        i");
            WriteLiteral(@"f ($(""#styleSearchWindowStyleTxt"").val().length > 0) {
            $(""#barcodeStyleTxt"").val(selectedStyleNo);
            $('#styleDataLabel').html(selectedStyleDesc);
            //console.log(clientconfig.wfdepinstId);
            
             refresValuesonChangeStyle();          
        }
        else {
            $(""#barcodeStyleTxt"").val("""");
            $(""#styleSearchWindowStyleTxt"").val("""");
            $('#styleDataLabel').val("""");
            $(""#barcodeColorTxt"").val("""");
            selectedStyle = null;
            selectedColor = null;

        }
        styleSearchGrid.dataSource.data([]);
        styleSearchWindow.close();
    }

    function GetClientByWF(arg){    
        refreshmsgBoxHeaderStyle();
        //if (wfid != null){ 
                $.ajax({
                url: '");
            EndContext();
            BeginContext(132740, 14, false);
#line 2612 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(132754, 3648, true);
            WriteLiteral(@"/Security/GetClientByWfIdandIP?clientIP=' + clientconfig.clientIP + '&wfid=' + wfid + '&clientId=' + clientconfig.clientId,
                type: 'GET',
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                beforeSend: function () {
                    $(""#ajaxBusy"").show();
                },
                complete: function () {
                    $(""#ajaxBusy"").hide();
                },
                success: function (response) {
                  if (response != null) {
                       var temwfdepinstId = clientconfig.wfdepinstId;

                        clientconfig = {
                                ""clientId"": response.clientId,
                                ""dataCaptureMode"": response.dataCaptureMode,
                                ""facName"": response.facName,
                                ""loginMode"": response.loginMode,
                                ""opCode1"": response.opCode1,
   ");
            WriteLiteral(@"                             ""opCode2"": response.opCode2,
                                ""operationName"": response.operationName,
                                ""recStatus"": response.recStatus,
                                ""selectMode"": response.selectMode,
                                ""teamId"": response.teamId,
                                ""teamName"": response.teamName,
                                ""facName"": response.facName,
                                ""wfdepinstId"": response.wfdepinstId,
                                ""wfId"": wfid,
                                ""clientIP"": clientconfig.clientIP
                            };   
                           
 
                            if (clientconfig.teamId == 0 || clientconfig.teamId == null) {
                                setMainOperationVisibility();
                            }

                            if(temwfdepinstId !=  clientconfig.wfdepinstId) {
                                 refresValuesonChange");
            WriteLiteral(@"Style();
                            }

                            setClientConfigInfo();
                        }   
                       else{
                           

                            msgBox.show('කාර්ය ප්‍රවාහයට අවසර නැත. කරුණාකර තොරතුරු තාක්ෂණ නිලධාරියෙකු අමතන්න.',
                                    'Client is not configured for this Workflow..WFID = '+ wfid + ' Please contact a IT helpdesk officer' ,
                                    'අවවාදයයි / Warning',
                                    'BS22',
                                    'Warning',
                                    null);
                            $(""#barcodeBcodeTxt"").val("""");
                            $(""#barcodeBcodeTxt"").focus();
                            sacanComplete = false;
                            errorbeforestauscomplete = errorbeforestauscomplete + ' ' + 'Client is not configured for this Workflow..WFID'
                            return;
                        }          
  ");
            WriteLiteral(@"                  },
                    error: function (jqXHR, textStatus, errorThrown) {
                        formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                    }
                });  
        //}   
    }

    function refresValuesonChangeStyle(arg) {
        refreshmsgBoxHeaderStyle();
        if (clientconfig.wfdepinstId != 0){
            // console.log('Calling GetWFConfigurationbyWFOpp by WFId:' + wfid + ', OperationCode:' + clientconfig.opCode1 + ', TeamId:' + clientconfig.teamId);
            $.ajax({
                url: '");
            EndContext();
            BeginContext(136403, 14, false);
#line 2684 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(136417, 105, true);
            WriteLiteral("/Lookup/GetConfigurationWFDEPInstId?WFDEPInstId=\' + clientconfig.wfdepinstId,  \r\n                //url: \'");
            EndContext();
            BeginContext(136523, 14, false);
#line 2685 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                   Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(136537, 7619, true);
            WriteLiteral(@"/Lookup/GetWFConfigurationbyWFOpp?WFId=' + wfid + '&OperationCode=' + clientconfig.opCode1 + '&TeamId=' + clientconfig.teamId,
                type: 'GET',
                dataType: 'json',
                //async: false,
                contentType: 'application/json; charset=utf-8',
                beforeSend: function () {
                    $(""#ajaxBusy"").show();
                },
                complete: function () {
                    $(""#ajaxBusy"").hide();
                },
                success: function (data) {
                    //Check whether barcode is exist in the db
                    //console.log('Calling GetWFConfigurationbyWFOpp succeded.');
                    if (data != null) {
                        //console.log('GetWFConfigurationbyWFOpp API result received from DCAP db..');
                        //console.log(data);
                        sessionStorage.setItem(""ScanOpMode"", data.scanOpMode);
                        selectedWfConfig = data;
         ");
            WriteLiteral(@"               
                        initializeDivisons();

                        clientconfig = {
                            ""clientId"": clientconfig.clientId,
                            ""dataCaptureMode"": clientconfig.dataCaptureMode,
                            ""pocounterNumber"" : clientconfig.pocounterNumber,
                            ""facName"": clientconfig.facName,
                            ""loginMode"": clientconfig.loginMode,
                            ""opCode1"": clientconfig.opCode1,
                            ""opCode2"": clientconfig.opCode2,
                            ""operationName"": clientconfig.operationName,
                            ""recStatus"": clientconfig.recStatus,
                            ""selectMode"": clientconfig.selectMode,
                            ""teamId"": clientconfig.teamId,
                            ""teamName"": clientconfig.teamName,
                            ""facName"": clientconfig.facName,
                            ""wfdepinstId"": select");
            WriteLiteral(@"edWfConfig.wfdepinstId,
                            ""wfId"": clientconfig.wfId,
                            ""clientIP"": clientconfig.clientIP
                        };


                        setClientConfigInfo();

                        if (data.scanOpMode == ScanOption.Continue) {
                            selectedScanOption = ScanOption.Continue;
                            $('#trxModeBtnPanel').show();
                            $('#scanActionButton').show();
                            //$('#dataLabelScanOpt').html('Continue');
                            var LblVal = clientconfig.operationName + ' / Continue'
                            $('#dataLabelOperation').html(LblVal);
                            $('#helpSin').html(""ස්කෑන් කිරීමට පෙර ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න."");
                            $('#helpEng').html(""Select Scan Action and Transaction before scanning the barcode."");
                            $('#barcodeBcodeTxt').attr(""disabled"", ""disabled"");
       ");
            WriteLiteral(@"                     selectTrxModeGood();
                        }
                        else if (data.scanOpMode == ScanOption.Before) {
                            selectedScanOption = ScanOption.Before;
                            $('#trxModeBtnPanel').show();
                            $('#scanActionButton').show();
                            //$('#dataLabelScanOpt').html('Before'); 
                            var LblVal1 = clientconfig.operationName + ' / Before'
                            $('#dataLabelOperation').html(LblVal1);
                            $('#helpSin').html(""ස්කෑන් කිරීමට පෙර ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න."");
                            $('#helpEng').html(""Select Scan Action and Transaction before scanning the barcode."");
                        }
                        else if (data.scanOpMode == ScanOption.After) {
                            selectedScanOption = ScanOption.After;
                            $('#trxModeBtnPanel').show();
                 ");
            WriteLiteral(@"           $('#scanActionButton').show();
                            //$('#dataLabelScanOpt').html('After');
                            var LblVal2 = clientconfig.operationName + ' / After'
                            $('#dataLabelOperation').html(LblVal2);
                            $('#trxModeReworkBtn').attr(""disabled"", ""disabled"");
                            $('#trxModeGoodBtn').attr(""disabled"", ""disabled"");
                            $('#trxModeScrapBtn').attr(""disabled"", ""disabled"");
                            //$('#helpSin').html(""ස්කෑන් කිරීමෙන් පසු ස්කෑන් ක්‍රමය සහ ස්කෑන් අකාරය තෝරන්න."");
                            //$('#helpEng').html(""Select Scan Action and Transaction after scanning the barcode."");
                            $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                            $(""#barcodeBcodeTxt"").focus();
                        }

                        if (data.poCounterEnable == 1) {
                            $('#counterLables').show();
         ");
            WriteLiteral(@"                   loadPOcounterValues();
                        }
                        else {
                            $('#counterLables').hide();
                        }

                        //Don't change below order as default has to be set for ""Add""
                        if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodReverse)) {
                            $('#trxModeGoodBtn').show();
                            $('#scanActionReverseBtn').show();

                            selectActionReverse();
                        }
                        if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.GoodAdd)) {
                            $('#trxModeGoodBtn').show();
                            $('#scanActionAddBtn').show();

                            selectActionAdd();
                        }
                        if (userPermissionList.some(permission => permission.functionId === Acces");
            WriteLiteral(@"sibleFunctions.ScrapReverse)) {
                            $('#trxModeScrapBtn').show();
                            $('#scanActionReverseBtn').show();

                            selectActionReverse();
                        }
                        if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ScrapAdd)) {
                            $('#trxModeScrapBtn').show();
                            $('#scanActionAddBtn').show();

                            selectActionAdd();
                        }
                        if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkReverse)) {
                            $('#trxModeReworkBtn').show();
                            $('#scanActionReverseBtn').show();

                            selectActionReverse();
                        }

                        if (userPermissionList.some(permission => permission.functionId === AccessibleFunctions.ReworkAdd)) {
");
            WriteLiteral(@"                            $('#trxModeReworkBtn').show();
                            $('#scanActionAddBtn').show();

                            selectActionAdd();
                        }
                        //console.log('Calling GetWFDetailByID API by wfid:' + wfid);
                        if(wfid == null)
                             wfid = clientconfig.wfId

                        $.ajax({
                            url: '");
            EndContext();
            BeginContext(144157, 14, false);
#line 2818 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(144171, 12408, true);
            WriteLiteral(@"/Lookup/GetWFDetailByID?WFId=' + wfid,
                            type: 'GET',
                            dataType: 'json',
                            async: false,
                            contentType: 'application/json; charset=utf-8',
                            beforeSend: function () {
                                $(""#ajaxBusy"").show();
                            },
                            complete: function () {
                                $(""#ajaxBusy"").hide();
                            },
                            success: function (data) {
                                //console.log('Calling GetWFDetailByID API succeded.');
                                if (data != null) {
                                    //console.log('GetWFDetailByID API result received from DCAP db..');
                                    selectedWorkflow = data;
                                    //console.log(selectedWorkflow);
                                }
                    ");
            WriteLiteral(@"            else {
                                    msgBox.show('කාර්ය ප්‍රවාහයට අදාල තොරතුරු නැත. කරුණාකර තොරතුරු තාක්ෂණ නිලධාරියෙකු අමතන්න.',
                                        'Workflow details not found. Please contact a IT helpdesk officer',
                                        'අවවාදයයි / Warning',
                                        'BS22',
                                        'Warning',
                                        null);
                                }

                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                            }
                        });
                    }
                    else {
                        //console.log('No configuration details available for selected style.');
                        msgBox.show('තෝරන ලද ස්ටයිල් සඳහා වින්‍යාස තොරතුරු නොමැත. කරුණාකර තොරතුරු තාක්ෂණ නිලධාරි");
            WriteLiteral(@"යෙකු අමතන්න.',
                            'No configuration details available for selected style. Please contact a IT helpdesk officer',
                            'අවවාදයයි / Warning',
                            'BS23',
                            'Warning',
                            null);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
                }
            });
        }
    }

    function refreshmsgBoxHeaderStyle() {
        $('#msgWindow').removeClass(""msgWindowWarning"");
        $('#msgWindow').removeClass(""msgWindowConfirm"");
    }

    function onChangeColor(arg) {
        var row = $(this.select()).closest(""tr"");
        var dataItem = colorSearchGrid.dataItem(row);
        selectedColor = dataItem;
        colorSearchGrid.dataSource.data([]);
        colorSearchWindow.close();
        if (selectedScanOption == ScanOption.After) {
");
            WriteLiteral(@"            $(""#barcodeBcodeTxt"").val("""");
            $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
            $('#trxModeReworkBtn').attr(""disabled"", ""disabled"");
            $('#trxModeGoodBtn').attr(""disabled"", ""disabled"");
            $('#trxModeScrapBtn').attr(""disabled"", ""disabled"");
            scannedBarcode = null;
            isValidBarcode = false;//to block function key behaviour
            $(""#barcodeBcodeTxt"").focus();
        }
        else if (selectedScanOption == ScanOption.Continue) {
            scannedBarcode = null;
            isValidBarcode = false;//to block function key behaviour
            $(""#barcodeBcodeTxt"").val("""");
            $(""#barcodeBcodeTxt"").focus();
        }
        $('#scheduleDataLabel').html("""");
        $('#poDataLabel').html("""");
        $('#dataLabelzFeature').html("""");
        $('#sizeDataLabel').html("""");
        $('#bcColorDataLabel').html("""");
        $('#ShadeLotPatt').html("""");        


        //console.log('User selected Color.");
            WriteLiteral(@".');
        //console.log(selectedColor);
    }

    function onChangeScrapReason(arg) {
        var row = $(this.select()).closest(""tr"");
        var dataItem = scrapReasonSearchGrid.dataItem(row);
        selectedScrapReason = dataItem;
        scrapReasonSearchGrid.dataSource.data([]);
        $(""#scrapReasonSearchWindow"").data(""kendoWindow"").close();

        if (selectedScanOption == ScanOption.After) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').focus();
            }
        }
        else if (selectedScanOption == ScanOption.Continue) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').focus();
                $(""#barcodeBcodeTxt"").attr(""disabled"", ""disabled"");
                $('#trxModeReworkBtn').attr(""disabled"", ""disabled"");
                $('#trxModeGoodBtn').attr(""disabled"", ""disabled"");
            }
        }
        //console.log('User selected Scrap Reason..');
        //console.log(selecte");
            WriteLiteral(@"dScrapReason);
    }

    function onStyleSearchClose() {
        if (selectedStyle != null) {
            $(""#barcodeStyleTxt"").val(selectedStyleNo);
            $('#styleDataLabel').html(selectedStyleDesc);
        }
        else {
            $(""#barcodeStyleTxt"").val("""");
            $('#styleDataLabel').html("""");
        }
        $(""#styleSearchWindowStyleTxt"").val("""");
        styleSearchGrid.dataSource.data([]);
    }

    function onScrapReasonSearchClose() {
        selectedDefectOpp = null;
        $(""#defectOpperation"").html("""");

        if ($(""#scrapReasonSearchWindowScrapTxt"").val().length = 0) {
            selectedScrapReason = null;
        }
        if (selectedScrapReason != null) {
            $(""#barcodeScrapReasonTxt"").val(selectedScrapReason.rrname);
            $(""#scrapReasonDataLabel"").html(selectedScrapReason.rrid);
        }
        else {
            $(""#barcodeScrapReasonTxt"").val("""");
            $(""#scrapReasonDataLabel"").html("""");
        }
    ");
            WriteLiteral(@"    $(""#scrapReasonSearchWindowScrapTxt"").val("""");
        scrapReasonSearchGrid.dataSource.data([]);

        if (selectedScanOption == ScanOption.After) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').focus();
            }
        }
        if (selectedScanOption == ScanOption.Continue) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').focus();
            }
            else {
                $(""#scrapReasonSearchBtn"").focus();
            }
        }
    }

    function onChangeReworkReason(arg) {

        var row = $(this.select()).closest(""tr"");
        var dataItem = reworkReasonSearchGrid.dataItem(row);
        selectedScrapReason = dataItem;
        reworkReasonSearchGrid.dataSource.data([]);
        $(""#reworkReasonSearchWindow"").data(""kendoWindow"").close();
        if (selectedScanOption == ScanOption.After) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').foc");
            WriteLiteral(@"us();
            }
        }
        else if (selectedScanOption == ScanOption.Continue) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').focus();
                $(""#barcodeBcodeTxt"").attr(""disabled"", ""disabled"");
                $('#trxModeReworkBtn').attr(""disabled"", ""disabled"");
                $('#trxModeGoodBtn').attr(""disabled"", ""disabled"");
            }
        }
        //console.log('User selected Rework Reason..');
        //console.log(selectedScrapReason);
    }

    function onChangeDefectOpps(arg) {

        var row = $(this.select()).closest(""tr"");
        var dataItem = defectOppSearchGrid.dataItem(row);
        selectedDefectOpp = dataItem;
        defectOppSearchGrid.dataSource.data([]);
        $(""#defectOppSearchWindow"").data(""kendoWindow"").close();

        if (selectedScanOption == ScanOption.After) {
            if (selectedDefectOpp != null) {

                $('#trxModeScrapBtn').focus();
            }
        }
  ");
            WriteLiteral(@"      else if (selectedScanOption == ScanOption.Continue) {
            if (selectedDefectOpp != null) {
                $('#trxModeScrapBtn').focus();
                $(""#barcodeBcodeTxt"").attr(""disabled"", ""disabled"");
                $('#trxModeReworkBtn').attr(""disabled"", ""disabled"");
                $('#trxModeGoodBtn').attr(""disabled"", ""disabled"");
            }
        }
        //console.log('User selected Defect Opreration..');
        //console.log(selectedDefectOpp);
    }

    function onReworkReasonSearchClose() {
        if ($(""#reworkReasonSearchWindowScrapTxt"").val().length = 0) {
            selectedScrapReason = null;
        }
        if (selectedScrapReason != null) {
            $(""#barcodeScrapReasonTxt"").val(selectedScrapReason.rrname);
            $(""#scrapReasonDataLabel"").html(selectedScrapReason.rrid);
            //$(""#defectOpperation"").html(""""); 
            //selectedDefectOpp = null;   
            //openReworkReasonPannel();                    
        }
");
            WriteLiteral(@"        else {
            $(""#barcodeScrapReasonTxt"").val("""");
            $(""#scrapReasonDataLabel"").html("""");
            //$(""#defectOpperation"").html("""");               
        }
        $(""#reworkReasonSearchWindowScrapTxt"").val("""");
        reworkReasonSearchGrid.dataSource.data([]);
               
    }

    function onDefectOppsSearchClose() {
        if ($(""#defectOppSearchWindowTxt"").val().length = 0) {
            selectedDefectOpp = null;
        }
        if (selectedDefectOpp != null) {
            //$(""#barcodeScrapReasonTxt"").val(selectedDefectOpp.dopsName);           
            $(""#defectOpperation"").html(selectedDefectOpp.dopsId);
            openReworkReasonPannel();
        }
        else {
            //$(""#barcodeScrapReasonTxt"").val("""");            
            $(""#defectOpperation"").html("""");
            $('#reworkReasonSearchBtn').trigger('click');
        }
        $(""#defectOppSearchWindowTxt"").val("""");
        defectOppSearchGrid.dataSource.data([]);
");
            WriteLiteral(@"
        if (selectedScanOption == ScanOption.After) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').focus();
            }
        }
        if (selectedScanOption == ScanOption.Continue) {
            if (selectedScrapReason != null) {
                $('#trxModeScrapBtn').focus();
            }
            else {
                $(""#reworkReasonSearchBtn"").focus();
            }
        }
    }

    function onColorSearchClose() {
        if (selectedColor != null) {
            $('#barcodeColorTxt').val(selectedColor.l4no);
            $('#colorDataLabel').html(selectedColor.l4desc);
        }
        else {
            $('#barcodeColorTxt').val("""");
            $('#colorDataLabel').html("""");
            if (selectedScanOption == ScanOption.After) {
                $(""#barcodeBcodeTxt"").val("""");
                $(""#barcodeBcodeTxt"").removeAttr(""disabled"");
                $('#trxModeReworkBtn').attr(""disabled"", ""disabled"");
               ");
            WriteLiteral(@" $('#trxModeGoodBtn').attr(""disabled"", ""disabled"");
                $('#trxModeScrapBtn').attr(""disabled"", ""disabled"");
                scannedBarcode = null;
                isValidBarcode = false;//to block function key behaviour                
                $(""#barcodeBcodeTxt"").focus();
            }
            else if (selectedScanOption == ScanOption.Continue) {
                scannedBarcode = null;
                isValidBarcode = false;//to block function key behaviour
                $(""#barcodeBcodeTxt"").val("""");
                $(""#barcodeBcodeTxt"").focus();
            }
            $('#scheduleDataLabel').html("""");
            $('#ShadeLotPatt').html("""");            
            $('#poDataLabel').html("""");
            $('#dataLabelzFeature').html("""");
            $('#sizeDataLabel').html("""");
            $('#bcColorDataLabel').html("""");         

        }
        $(""#colorSearchWindowColorTxt"").val("""");
        colorSearchGrid.dataSource.data([]);
        $(""#barcodeBc");
            WriteLiteral("odeTxt\").focus();\r\n    }\r\n\r\n    var ReworkObject;\r\n\r\n    function GetRejectCat() {\r\n        $.ajax({\r\n            url: \'");
            EndContext();
            BeginContext(156580, 14, false);
#line 3121 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(156594, 1777, true);
            WriteLiteral(@"/Lookup/GetRejectReasonCategory?RRType=2',
            type: 'GET',
            dataType: 'json',
            //async: false,
            contentType: 'application/json',
            beforeSend: function () {
                $(""#ajaxBusy"").show();
            },
            complete: function () {
                $(""#ajaxBusy"").hide();
            },
            success: function (response) {
                ReworkObject = response;
                //var desc= response
                $(""#ddlScrapReason"").kendoDropDownList({
                    dataTextField: ""rrcatName"",
                    dataValueField: ""rrcatId"",
                    dataSource: response,
                    optionLabel: ""Select Rework Reason"",
                    index: 0,
                    change: function (e) {
                        RejectReasonCatChange();
                    }
                });
            },

        });
    }

    function RejectReasonCatChange() {
        reworkReasonSearchGrid.");
            WriteLiteral(@"dataSource.read({ RRCat: $(""#ddlScrapReason"").val() });
        $(""#reworkReasonSearchWindowScrapTxt"").val("""");
    }

    function operationChange(arg) {
        var oppcodeTeamcode = $(""#ddlMainOperation"").val();
        var operationText = $(""#ddlMainOperation"").data(""kendoDropDownList"").text();
        if (oppcodeTeamcode != null && oppcodeTeamcode != """") {
            var operation = oppcodeTeamcode.split('-');

            if (operation.length > 1) {

                var OppCode = operation[0].substring(operation[0].indexOf(""["") + 1, operation[0].indexOf(""]""));
                var TeamId = operation[1].substring(operation[1].indexOf(""["") + 1, operation[1].indexOf(""]""));

                $.ajax({
                    url: '");
            EndContext();
            BeginContext(158372, 14, false);
#line 3167 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                     Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(158386, 2557, true);
            WriteLiteral(@"/Security/GetWfDEPInstByTeamOppWF?TeamId=' + TeamId + '&OppCode=' + OppCode + '&WFId=' + clientconfig.wfId,
                    type: 'GET',
                    dataType: 'json',
                    async: false,
                    contentType: 'application/json',
                    beforeSend: function () {
                        $(""#ajaxBusy"").show();
                    },
                    complete: function () {
                        $(""#ajaxBusy"").hide();
                    },
                    success: function (response) {
                        if (response != null) {
                            WFDEPInstId = response.wfdepinstId;
                           
                            var operationNames = operationText.split('-');

                            if (operationNames.length > 1) {
                                var OppName = operationNames[0]
                                var TeamName = operationNames[1]

                                var clientconfigT");
            WriteLiteral(@"emp = {
                                    ""clientId"": clientconfig.clientId,
                                    ""dataCaptureMode"": clientconfig.dataCaptureMode,
                                    ""pocounterNumber"" : clientconfig.pocounterNumber,
                                    ""facName"": clientconfig.facName,
                                    ""loginMode"": clientconfig.loginMode,
                                    ""opCode1"": OppCode,
                                    ""opCode2"": 0,
                                    ""operationName"": OppName,
                                    ""recStatus"": clientconfig.recStatus,
                                    ""selectMode"": clientconfig.selectMode,
                                    ""teamId"": TeamId,
                                    ""teamName"": TeamName,
                                    ""wfdepinstId"": WFDEPInstId,
                                    ""wfId"": clientconfig.wfId,
                                    ""clientIP"": clientconfig.c");
            WriteLiteral(@"lientIP
                                };

                                clientconfig = null;

                                clientconfig = clientconfigTemp
                                setClientConfigInfo();
                            }


                        }
                    },
                })
            }


            // $('#dataLabelOperation').html(operation[0]);
        }
    }

    function getWFDEPInstId(arg) {
         $.ajax({
                //url: '");
            EndContext();
            BeginContext(160944, 14, false);
#line 3225 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                   Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(160958, 124, true);
            WriteLiteral("/Security/GetWfDEPInstByClientWF?ClientId=\' +  clientconfig.clientId + \'&WFId=\' + clientconfig.wfId,\r\n                url: \'");
            EndContext();
            BeginContext(161083, 14, false);
#line 3226 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
                 Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(161097, 780, true);
            WriteLiteral(@"/Security/GetWfDEPInstByTeamOppWF?TeamId=' +  TeamId + '&OppCode=' + clientconfig.OppCode + '&WFId=' + clientconfig.wfId ,
                
                type: 'GET',
                dataType: 'json',
                async: false,
                contentType: 'application/json',
                beforeSend: function () {
                    $(""#ajaxBusy"").show();
                },
                complete: function () {
                    $(""#ajaxBusy"").hide();
                },
                success: function (response) {
                    if (response != null) {
                        WFDEPInstId =response.wfdepinstId;
                }   
            },
        });
    }

    function getOperation() {
        $.ajax({
            url: '");
            EndContext();
            BeginContext(161878, 14, false);
#line 3248 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(161892, 1595, true);
            WriteLiteral(@"/Lookup/GetOpperationsByUser?UserId=' + txUser.userId + '&ClientIp=' +  clientconfig.clientIP ,
            type: 'GET',
            dataType: 'json',
            //async: false,
            contentType: 'application/json',
            beforeSend: function () {
                $(""#ajaxBusy"").show();
            },
            complete: function () {
                $(""#ajaxBusy"").hide();
            },
            success: function (response) {
                operationList = response;
                $(""#ddlMainOperation"").data(""kendoDropDownList"").dataSource.data([]);
                $(""#ddlMainOperation"").kendoDropDownList({
                    dataTextField: ""displayVal"",
                    dataValueField: ""valueField"",                   
                    dataSource: response,
                    index: 0,
                    autoBind: true,
                    optionLabel: {
                        displayVal: ""Select Operation"",
                        valueField: 0
          ");
            WriteLiteral(@"          },
                    change: function (e) {
                        operationChange();

                    }
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                formatErrorMessage(jqXHR, errorThrown, ""Barcode"");
            }
        });
    }

    function loadPOcounterValues() {
        refreshmsgBoxHeaderStyle();
        //console.log(""pocounterNumber load po counter: "", clientconfig.pocounterNumber);
        $(""#pocounterdiv"").hide();
        $.ajax({
            url: '");
            EndContext();
            BeginContext(163488, 14, false);
#line 3289 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(163502, 6176, true);
            WriteLiteral(@"/Lookup/GetPOcounterValues?WFDEPInstId=' + selectedWfConfig.wfdepinstId,
            type: 'GET',
            dataType: 'json',
            //async: false,
            contentType: 'application/json',
            beforeSend: function () {
                $(""#ajaxBusy"").show();
            },
            complete: function () {
                $(""#ajaxBusy"").hide();
            },
            success: function (response) {
                //Modifed by NimanthaH
                runningPOCounters = [];
                if(response.length != 0) {
                    $(""#pocounterdiv"").show();
                    runningPOCounters = response;
                    var result = """";  
                    $(""#counerlabelDetails"").html('');  
                    $.each(response, function (id, counter) {
                        
                        if(selectedWfConfig.poCounterNumber == 1){
                            if(counter.qty01 >= counter.bagSize){
                                msgBox.s");
            WriteLiteral(@"how(counter.scheduleNo + ' - ' + counter.colorDesc + ' (' + counter.counterId + ') කවුන්ටරය පිරී ඇත. කරුණාකර බෑගය වහන්න.',
                                'The counter is full. Please close the bag.','අවවාදයයි / Warning', 'LG03','Warning',null);
                                haltsystem = true; //halt the system 
                            }
                        }

                        result += '<td id=""ctd' + (counter.counterId) + '"" style=""height: 84px;"">'+
                                    '<div id=""cou' + (counter.counterId) + '"" class=""col-xs-1 cell"">'+
                                        '<table id=""counter' + counter.counterId + '"">'+
                                            '<tbody>' +
                                                '<tr id= ""poCounterNumberDiv"">' + 
                                                    '<td class=""counter-td counter-round"">' +
                                                        '<button class=""counter-key-button"" type=""button"" id=""POBt");
            WriteLiteral(@"n' + counter.counterId + '-key"" onClick=""OpenPOCounterPannel(' + (counter.counterId) + ')"" title=""Open Counter Window"">' +
                                                        '<span id=""counterNumber' + (counter.counterId+1) + '"" class=""counter-key"">' + counter.bagBarCode + '</span>' +
                                                    '</td>' +
                                                '</tr>' +
                                                '<tr>' +
                                                    '<td class=""counter-td counter-round"">' +
                                                        '<button type=""button"" id=""POBtn' + counter.counterId + '"" class=""btn btn-primary control-label_PO"" onClick=""OpenPOCounterPannel(' + (counter.counterId) + ')"" title=""Open Counter Window"""">' +
                                                        '<span id=""Style' + (counter.counterId) + '"" class=""buttonTxt"" hidden=""hidden"">' + counter.styleNo + '</span>' +
                                     ");
            WriteLiteral(@"                   '<span id=""PO' + (counter.counterId) + '"" class=""buttonTxt"" hidden=""hidden"">' + counter.poNo + '</span>' +
                                                        '<span id=""ZFeature' + (counter.counterId) + '"" class=""buttonTxt"" hidden=""hidden"">' + counter.zfeature + '</span>' +
                                                        '<span id=""Shedule' + (counter.counterId) + '"" class=""buttonTxt"">' + counter.scheduleNo + '</span>' +
                                                        '<span id=""Separater""> : </span>' +
                                                        '<span id=""Color' + (counter.counterId) + '"" class=""buttonTxt"">' + counter.colorDesc + '</span>' +
                                                        '</button>' +
                                                    '</td>' +
                                                '</tr>' +
                                                '<tr>' +
                                                    '<td class=""");
            WriteLiteral(@"counter-td counter-round"">' +
                                                        '<label id=""POCunt' + (counter.counterId) + '"" class=""control-po_counter"" style=""width: 100%;"">' + counter.qty01 + (selectedWfConfig.poCounterNumber == 1 ? ' / ' + counter.bagSize : '') + '</label> ' +
                                                        '<label id=""POCuntNumber' + (counter.counterId) + '"" class=""cutqty"" style=""width: 100%;"" hidden=""hidden"">' + counter.qty01 + '</label> ' +
                                                        (selectedWfConfig.poCounterNumber == 1 ? '<label id=""CutQuantity' + (counter.counterId) + '"" class=""cutqty"" style=""width: 100%;"">' + counter.cutQuantity + '</label> ' : '<label id=""CutQuantity' + (counter.counterId) + '"" class=""cutqty"" style=""width: 100%;"" hidden=""hidden"">' + counter.cutQuantity + '</label> ') +
                                                        '<label id=""POCuntID' + (counter.counterId) + '"" style=""width: 0%;"" hidden=""hidden"">' + counter.counterId + '</");
            WriteLiteral(@"label> ' +
                                                        '<label id=""BagBarcodeVal' + (counter.counterId) + '"" style=""width: 0%;"" hidden=""hidden"">' + counter.bagBarCode + '</label> ' +
                                                        '<label id=""BagSizeVal' + (counter.counterId) + '"" style=""width: 0%;"" hidden=""hidden"">' + counter.bagSize + '</label> ' +
                                                    '</td>' +
                                                '</tr>' +
                                            '</tbody>' +
                                        '</table>' +
                                    '</div>' +
                                '</td>'
                    });
                    $(""#counerlabelDetails"").html(result);
                    focousPOcounterValues();
                } else {
                    $(""#counerlabelDetails"").html('');
                }
            },

        });
    }

    function updatePOcounterValues(counterId) {
    ");
            WriteLiteral("    $.ajax({\r\n            url: \'");
            EndContext();
            BeginContext(169679, 14, false);
#line 3367 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(169693, 2894, true);
            WriteLiteral(@"/Lookup/GetUpdatedPOcounterValues?WFDEPInstId=' + selectedWfConfig.wfdepinstId + '&CounterId=' + counterId,
            type: 'GET',
            dataType: 'json',
            async: false,
            contentType: 'application/json',
            beforeSend: function () {
                $(""#ajaxBusy"").show();
            },
            complete: function () {
                $(""#ajaxBusy"").hide();
            },
            success: function (response) {
                console.log(response);
                if(response == undefined) {
                    loadPOcounterValues();
                } else {
                    if(response != null) {
                        if(selectedWfConfig.poCounterNumber == 1){
                            if(response.qty01 >= response.bagSize){
                                msgBox.show(response.bagBarCode + ' (' + response.counterId + ') කවුන්ටරය පිරී ඇත. කරුණාකර බෑගය වහන්න.',
                                'The counter is full. Please close the bag.','අ");
            WriteLiteral(@"වවාදයයි / Warning', 'LG03','Warning',null);
                                haltsystem = true; //halt the system 
                            }
                        }

                        $(""#POCunt"" + response.counterId).html(response.qty01 + ' / ' + response.bagSize);
                        $(""#CutQuantity"" + response.counterId).html(response.cutQuantity);
                        $(""#BagSizeVal"" + response.counterId).html(response.bagSize);
                        $(""#POCuntNumber"" + response.counterId).html(response.qty01);

                        if(lastUpdatedCounterId != response.counterId) {
                            $(""id, #POBtn"" + lastUpdatedCounterId).removeClass('active');
                            $(""id, #POBtn"" + lastUpdatedCounterId + ""-key"").removeClass('active-c');

                            $(""id, #POBtn"" + response.counterId).addClass('active');
                            $(""id, #POBtn"" + response.counterId + ""-key"").addClass('active-c');
                    ");
            WriteLiteral(@"        $(""#POBtn"" + response.counterId).focus();

                            lastUpdatedCounterId = response.counterId;
                        }

                        $(""#barcodeBcodeTxt"").focus();
                    } else {
                        loadPOcounterValues();
                        msgBox.show(counter.scheduleNo + ' - ' + counter.colorDesc + ' (' + counter.counterId + ') කවුන්ටරය යාවත්කාලීන කිරීම අසාර්ථක විය. (GetUpdatedPOcounterValues ​​API මඟින් ශුන්‍ය අගයක් ලබා දෙයි).',
                                'counter update failed. (GetUpdatedPOcounterValues API returns null value).','අවවාදයයි / Warning', 'LG03','Warning',null);
                    }
                }
            },
        });
    }

    //Added by NimanthaH
    function focousPOcounterValues() {
        $.ajax({
            url: '");
            EndContext();
            BeginContext(172588, 14, false);
#line 3422 "C:\Projects\DCap\App\Brandix.DCAP.WebUI - OutSource\Views\Home\Barcode.cshtml"
             Write(ViewBag.APIURL);

#line default
#line hidden
            EndContext();
            BeginContext(172602, 35963, true);
            WriteLiteral(@"/Lookup/GetMostUpdatedPOcounter?WFDEPInstId=' + selectedWfConfig.wfdepinstId,
            type: 'GET',
            dataType: 'json',
            async: false,
            contentType: 'application/json',
            beforeSend: function () {
                $(""#ajaxBusy"").show();
            },
            complete: function () {
                $(""#ajaxBusy"").hide();
            },
            success: function (response) {
                //console.log(response);
                if(response != null) {
                    //if(lastUpdatedCounterId != response.counterId) {
                        $(""#POBtn"" + response.counterId).focus();
                        $(""id, #POBtn"" + response.counterId).addClass('active');
                        $(""id, #POBtn"" + response.counterId + ""-key"").addClass('active-c');
                        $(""#barcodeBcodeTxt"").focus();
                        lastUpdatedCounterId = response.counterId;
                    //}
                }
            },

 ");
            WriteLiteral(@"       });
    }

    function beep(vol, freq, duration){
                v=a.createOscillator()
                u=a.createGain()
                v.connect(u)
                v.frequency.value=freq
                v.type=""square""
                u.connect(a.destination)
                u.gain.value=vol*0.01
                v.start(a.currentTime)
                v.stop(a.currentTime+duration*0.001)
    }

    function beeponce() {   
        var snd = new Audio(""data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3");
            WriteLiteral(@"Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZ");
            WriteLiteral(@"mV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67d");
            WriteLiteral(@"ZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////");
            WriteLiteral(@"////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU="");       
            snd.play(); 
    }

    //Disable Enabale Barcode Scan Textbox
    function DisableControllers() {
        $(""#barcodeBcodeTxt"").attr('disabled', 'disabled');
    }

    function EnableControllers() {
        $(""#barcodeBcodeTxt"").removeAttr('disabled');

    }

</script>

<!-- Main Window: START -->
<div class=""form-group"">    
    <div class=""row"">
        <div class=""col-xs-6"" style=""width: 47%; /*border-radius: 15px; border: #ffffff63 solid 2px; top: 10px; box-shadow: 6px 7px 5px #00000075;*/"">
     ");
            WriteLiteral(@"       <div class=""row"" id=""dvMainOpp""> 
                <label class=""col-xs-2 control-label control-label-main"" style=""width: 22%;"">Operation :</label> 
                <div class=""col-md-6"">
                    <div id=""ddlMainOperation"" class=""form-control"" style=""width: 120%;""></div>
                </div>
                <div class=""col-md-2""></div>
            </div>
            <div class=""row"">
                <label class=""col-xs-2 control-label control-label-main"" style=""width: 22%;"">Style :</label>
                <div class=""col-xs-3"">
                    <input type=""text"" id=""barcodeStyleTxt"" class=""form-control"" style=""height: 44px;"" placeholder=""Select Style"" readonly>
                </div>
                <div class=""col-xs-1"">
                    <button type=""button"" id=""styleSearchBtn"" class=""btn btn-primary searchButton"" style=""margin-left: 15px; margin-top: 19px;"" title=""Style Search"">
                        <span><i class=""fas fa-search""></i></span>                     ");
            WriteLiteral(@"       
                    </button>
                </div>
                <div class=""col-xs-5"">
                    <label class=""control-datalabel control-datalabel-search"" id=""styleDataLabel"" ></label>
                </div>
            </div>            
            <div class=""row"">
            <label class=""col-xs-2 control-label control-label-main"" style=""width: 22%;"">Color :</label>
                <div class=""col-xs-3"">
                    <input type=""text"" id=""barcodeColorTxt"" class=""form-control"" placeholder=""Select Color"" style=""height: 44px;"" readonly>
                </div>
                <div class=""col-xs-1"">
                    <button type=""button"" id=""colorSearchBtn"" class=""btn btn-primary searchButton"" style=""margin-left: 15px; margin-top: 19px;"" title=""Color Search"">
                        <span><i class=""fas fa-search""></i></span>                            
                    </button>
                </div>
                <div class=""col-xs-5"">
               ");
            WriteLiteral(@"     <label class=""control-datalabel control-datalabel-search"" id=""colorDataLabel"" ></label>                               
                </div>                               
            </div>            
            <div class=""row"">
                <label class=""col-xs-2 control-label control-label-main"" style=""width: 22%;"">Barcode :</label>
                <div class=""col-xs-7"">
                    <input type=""textarea"" id=""barcodeBcodeTxt"" class=""form-control textbox-barcode"" maxlength=""12"" placeholder=""Scan Barcode"">
                </div>
            </div>
            <div class=""row"">
                <div class=""col-xs-2""></div>
                <div class=""col-xs-3""></div>
                <div class=""col-xs-4""></div>
            </div>

            <div class=""row"" id=""scanActionButton"">
                <label class=""col-xs-2 control-label control-label-main"" style=""width: 22%;"">Action :</label>
                <div class=""col-xs-5"">                    
                    <div ");
            WriteLiteral(@"class=""roundCornerGroupBox roundCornerGroupBox_BC roundCornerGroupBox_BC_Ac"">
                        <label class=""control-label-submitbtn"">
                            <button type=""button"" id=""scanActionAddBtn"" class=""btn bs-btn-primary-action submitButton"" title=""Add"">
                                <span>Add</span>                            
                            </button>
                        </label>                                                
                        <label class=""control-label-submitbtn"">
                            <button type=""button"" id=""scanActionReverseBtn"" class=""btn bs-btn-primary-action submitButton"" style=""margin-right: 12px;"" title=""Reverse"">
                                <span>Reverse</span>                            
                            </button>
                        </label>                                            
                    </div>  
                </div>
                <div class=""col-xs-4"" style=""padding-top: 18p");
            WriteLiteral(@"x"">
                    <label class=""control-label-submitbtn"" style=""padding-top: 8px !important;"">
                            <div class=""row"">
                        <button type=""button"" id=""resetBtn"" class=""btn btn-primary submitButton"" title=""Reset"" style=""width: 26%; padding-top: 17px;"">
                            <span>Reset</span>                            
                        </button>
                        </div>
                    </label>                  
                </div>        
            </div>
                    
            <div class=""row"" id=""trxModeBtnPanel"">
                <label class=""col-xs-2 control-label control-label-main"" style=""width: 22%;"">Tx Mode :</label>
                <div class=""col-xs-8"">
                    <div class=""roundCornerGroupBox roundCornerGroupBox_BC roundCornerGroupBox_BC_SC"">               
                        <label class=""control-label-submitbtn"">
                            <button type=""button"" id=""trxModeGoodBtn""");
            WriteLiteral(@" class=""btn bs-btn-primary-good submitButton scanOptionBtn"" title=""Good"">
                                <span>Good</i></span>                            
                            </button>
                        </label>                                                
                        <label class=""control-label-submitbtn"">
                            <button type=""button"" id=""trxModeScrapBtn"" class=""btn bs-btn-primary-scrap submitButton scanOptionBtn"" title=""Scrap"">
                                <span>Scrap</span>                            
                            </button>
                        </label>
                        <label class=""control-label-submitbtn"">
                            <button type=""button"" id=""trxModeReworkBtn"" class=""btn bs-btn-primary-rework submitButton scanOptionBtn"" title=""Rework"" style=""margin-right: 10px;"">
                                <span>Rework</span>                            
                            </button>
                 ");
            WriteLiteral(@"       </label>    
                    </div>                      
                </div> 
                <div class=""col-xs-2""></div>        
            </div>
            <div class=""row"" id=""divScrapReason"">
                <label class=""col-xs-2 control-label control-label-main"" style=""width: 22%;"">Scrap Reason :</label>
                <div class=""col-xs-3"" style=""width: 34%;"">
                    <input type=""text"" id=""barcodeScrapReasonTxt"" class=""form-control"" placeholder=""Select Scrap Reason"" readonly>
                </div>
                <div class=""col-xs-1"">                
                    <button type=""button"" id=""scrapReasonSearchBtn"" class=""btn btn-primary searchButton"" title=""Scrap Reason Search"">
                        <span><i class=""fas fa-search""></i></span>                            
                    </button>                                             
                </div>
                <div class=""col-xs-1"">   
                    <button type=""button");
            WriteLiteral(@""" id=""reworkReasonSearchBtn"" class=""btn btn-primary searchButton"" title=""Rework Reason Search"">
                        <span><i class=""fas fa-search""></i></span>                            
                    </button>
                </div>  
                <div class=""col-xs-2"">
                    <label class=""control-datalabel control-datalabel-search"" id=""scrapReasonDataLabel"" ></label>
                </div> 
                <div class=""col-xs-1"">
                    <label class=""control-datalabel control-datalabel-search"" id=""defectOpperation"" ></label>
                </div>  
                                        
            </div>                     
        </div>

        <div class=""col-xs-6"" style=""width: 53%;"">
            <div class=""bc_rightcontent"">
                <div class=""row"">
                    <div class=""col-xs-12"">
                        <div class=""row roundCornerGroupBox"" style=""margin-right: 3px;"">
                            <div class=""row"" style=");
            WriteLiteral(@"""margin-top: 8px;"">                               
                                <label class=""control-scan-status"" style=""padding-left: 0px;width: 14%;"">Barcode :</label>               
                                <label class=""control-scan-status-val"" style=""padding-left: 0px;width: 17%;"" id=""lastBarcodeDataLabel"" ></label>
                                
                                <label class=""control-scan-status"" style=""padding-left: 0px;width: 9%;"">Action :</label>               
                                <label class=""control-scan-status-val"" style=""padding-left: 0px;width: 8%;"" id=""lastAction"" ></label>
                                
                                <label class=""control-scan-status"" style=""padding-left: 0px;width: 13%;"">Tx Mode :</label>               
                                <label class=""control-scan-status-val"" style=""padding-left: 0px;width: 12%;"" id=""lastTxMode"" ></label>
                                
                                <label");
            WriteLiteral(@" class=""control-scan-status"" style=""padding-left: 0px;width: 10%;"">Tot Qty :</label>               
                                <label class=""control-scan-status-val"" style=""padding-left: 0px;width:5%;"" id=""totQty"" >0</label>                                                
                            </div>
                            <div class=""row"">
                                <div class=""col-xs-4"">
                                    <!--<div class=""row"" style=""text-align: center !important;"">
                                        <label class=""control-label"">Scanned Status</label>
                                    </div>-->
                                    <div class=""row"" style=""text-align: center !important;""> <!--height:10vh; Modified by NimanthaH-->
                                        <label class=""control-datalabel-scannedstatus-fail blinktext"" id=""scannedStatusDataLabel""></label>
                                    </div>                      
                         ");
            WriteLiteral(@"       </div>
                                 <div class=""col-xs-8"">    
                                    <div class=""row"" style=""text-align: center !important;"">
                                        <label class=""control-label"" style=""text-align:left; margin-left: 124px; margin-top: 13px;"">Scanned Count (current)</label>
                                    </div>                                          
                                    <!--<div class=""row"" style=""text-align: center !important; visibility: hidden;"">
                                        <label class=""control-label"" style=""width: 20%; text-align:left;"">Previous hr.</label>
                                        <label class=""bs-lbl-counter-good bs-lbl-counter""  id=""prevHGood"">0</label>
                                        <label class=""bs-lbl-counter-scrap bs-lbl-counter"" id=""prevHScrap"">0</label> 
                                        <label class=""bs-lbl-counter-rework bs-lbl-counter"" id=""prevHRework"">0</label>
 ");
            WriteLiteral(@"                                   </div> -->
                                    <div class=""row"" style=""text-align: center !important;""> 
                                        <label class=""control-label"" style=""width: 20%; text-align:left;""></label>
                                        <label class=""bs-lbl-counter-good bs-lbl-counter"" id=""crntHGood"">0</label>
                                        <label class=""bs-lbl-counter-scrap bs-lbl-counter"" id=""crntHScrap"">0</label>
                                        <label class=""bs-lbl-counter-rework bs-lbl-counter"" id=""crntHRework"">0</label>
                                    </div>
                                    <div class=""row"" style=""text-align: center !important; height: 10px;""></div>                                                                
                                </div>                                                  
                            </div>                                                             
   ");
            WriteLiteral(@"                     </div>
                    </div>                                                  
                </div>
                <div class=""row"" style=""padding-right: 15px;"">
                    <div class=""col-xs-12"">                    
                        <div class=""row  roundCornerGroupBox"" style=""height:25vh;"">                            
                            <div class=""col-xs-7"" style=""padding-left: 0px;"">                                 
                                <div class=""row"" style=""height:7vh; overflow: auto;"">                                                         
                                    <label class=""control-label col-xs-3"">PO :</label>               
                                    <label class=""bcInfoDataLabel col-xs-8"" id=""poDataLabel"" ></label>                                        
                                </div>                                 
                                <div class=""row"" style=""height:7vh; overflo");
            WriteLiteral(@"w: auto;"">
                                    <label class=""control-label col-xs-3"">Z Fture. :</label>               
                                    <label class=""bcInfoDataLabel col-xs-8"" id=""dataLabelzFeature"" ></label>                    
                                </div>
                                <div class=""row"" style=""height:7vh; overflow: auto;"">
                                    <label class=""control-label col-xs-3"">Color :</label>               
                                    <label class=""bcInfoDataLabel col-xs-8"" id=""bcColorDataLabel"" ></label>                                   
                                </div> 
                            </div>
                            <div class=""col-xs-5"" style=""padding-left: 0px;"">
                                <div class=""row"" style=""height:7vh; overflow: auto;"">                                                    
                                    <label class=""control-label col-xs-4"" style=""padding-left: 0px;"">");
            WriteLiteral(@"Size :</label>               
                                    <label class=""bcInfoDataLabel col-xs-3"" style=""width:140px;"" id=""sizeDataLabel"" ></label>
                                </div>
                                <div class=""row"" style=""height:7vh; overflow: auto;"">             
                                    <label class=""control-label col-xs-4"" style=""padding-left: 0px;"">Schedule :</label>               
                                    <label class=""bcInfoDataLabel col-xs-3"" id=""scheduleDataLabel"" ></label>
                                </div>  
                                <div class=""row"" style=""height:7vh; overflow: auto;"">           
                                    <label class=""control-label col-xs-4"" style=""padding-left: 0px; width:155px;"">Shade Lot / Patt :</label>               
                                    <label class=""bcInfoDataLabel col-xs-3"" id=""ShadeLotPatt"" ></label>
                                </div>                       
               ");
            WriteLiteral(@"             </div>                                
                        </div>                            
                    </div>                   
                </div>
                <div class=""row"" style=""padding-right: 15px;"">
                    <div class=""col-xs-12"">
                        <div class=""row roundCornerGroupBox"">
                            <div class=""col-xs-6"" style=""padding-left: 0px;"">
                                <div class=""row"">                   
                                    <label class=""control-label col-xs-4"" style= ""width: 30%"" >Factory :</label>
                                    <label class=""control-datalabel col-xs-6 pad-remove-loclables"" id=""dataLabelFactory"" ></label>            
                                </div>  
                                <div class=""row"">                    
                                    <label class=""control-label col-xs-4"" style= ""width: 30%"">Team :</label>
                                    <l");
            WriteLiteral(@"abel class=""control-datalabel col-xs-6 pad-remove-loclables"" id=""dataLabelTeam"" ></label>
                                </div>
                                <div class=""row"" style=""padding-bottom: 10px;"">                    
                                    <label class=""control-label col-xs-4"" style= ""width: 34%"">Operation :</label>
                                    <label class=""control-datalabel col-xs-6 pad-remove-loclables"" id=""dataLabelOperation"" ></label>
                                </div>                    
                            </div>
                            <div class=""col-xs-6"" style=""padding-left: 0px;"">
                                <div class=""row"">                                
                                    <div class=""col-xs-7"" >                                                       
                                        <label class=""counterlbl"" id=""dataLabelScanCounter"" >0</label>
                                    </div> 
                    ");
            WriteLiteral(@"                <div class=""col-xs-5"" >
                                        <button type=""button"" id=""resetCounterBtn"" class=""btn btn-primary submitButton"" title=""Reset"" style=""width: 26%; padding-top: 17px; margin-top: 27px;"">
                                            <span>Reset</span>                            
                                        </button>
                                    </div> 
                                <!--     

                                <div class=""row"">                    
                                    <label class=""control-label col-xs-4"">Client IP :</label>
                                    <label class=""control-datalabel col-xs-6""id=""dataLabelClientIP"" ></label>
                                </div> 
                                <div class=""row"">                    
                                    <label class=""control-label col-xs-4"">Scan Opt :</label>
                                    <label class=""control-datalabel col-xs");
            WriteLiteral(@"-6""id=""dataLabelScanOpt"" ></label>
                                </div> 
                                
                                -->
                                </div>
                            </div>                                                                   
                        </div>
                    </div>
                    <div class=""col-xs-6"">
                        <div class=""row roundCornerGroupBox"" style=""height: 25vh;"" hidden=""hidden"">                            
                            <div class=""row"" style=""text-align:center;"">                   
                                <label class=""control-label"">Accessible Functions</label>                                    
                            </div>
                            <div id=""userpermissionlist"" style=""height: 12vh; overflow-y: scroll;"">

                            </div>                                                    
                        </div>
                    <");
            WriteLiteral(@"/div> 
                </div>          
            </div>        
        </div>
    </div>

    <div class=""row"">
        <div class=""col-xs-5"">
            <label class=""bc-funckey-help"">F1-Good</label> 
            <label class=""bc-funckey-help"">F2-Scrap</label>
            <label class=""bc-funckey-help"">F3-Rework</label> 
            <label class=""bc-funckey-help"">F5-Add</label> 
            <label class=""bc-funckey-help"">F6-Reverse</label>
        </div>                        
    </div>

    <div class=""row"" class=""m-2""></div>

    <div class=""row"" class=""m-2"" style=""margin-right: 15px;"" id=""pocounterdiv"">
        <div id=""counterLables"" class=""roundCornerGroupBox_Scrolabale"" hidden=""hidden"" style=""padding-bottom: 12px; display: initial;"" >
            <div class=""row col-md-12 roundCornerGroupBox_PO_Counter"" style=""width: 99.7% !important; overflow-y: hidden; overflow-x: auto;"">
                <table style=""margin-top: 6px; margin-bottom: 16px;"">
                    <tbody>
  ");
            WriteLiteral(@"                      <tr id=""counerlabelDetails"" class=""scrolable-field""></tr>
                    </tbody>
                </table>
            </div>     
        </div>
    </div>

    <div class=""row"" class=""m-2""></div>
</div>
<!-- MAIN WINDOW: END-->

<!-- STYLE SEARCH WINDOW: START-->
<div id=""styleSearchWindow"" class=""styleSearchWindow"" hidden=""hidden"">
    <input type=""text"" class=""form-control"" placeholder=""Enter Style"" id=""styleSearchWindowStyleTxt"" style=""width:25%"">
    <br>
    <div id=""styleSearchGrid"">
</div>
<!-- STYLE SEARCH WINDOW: END-->

<!-- COLOR SEARCH WINDOW: START-->
<div id=""colorSearchWindow"" class=""colorSearchWindow"" hidden=""hidden"">
    <input type=""text"" class=""form-control"" placeholder=""Enter Color"" id=""colorSearchWindowColorTxt"" style=""width:25%"">
    <br>
    <div id=""colorSearchGrid"">
    </div>
</div>
<!-- COLOR SEARCH WINDOW: END-->

<!--SCRAP REASON SEARCH: START-->
<div id=""scrapReasonSearchWindow"" class=""scrapReasonSearchWindow"" hidden=""hidd");
            WriteLiteral(@"en"">
    <input type=""text"" class=""form-control"" placeholder=""Enter Scrap Reason"" id=""scrapReasonSearchWindowScrapTxt"" style=""width:25%"">
    <br>
    <div id=""scrapReasonSearchGrid"">
    </div>
</div>
<!--SCRAP REASON SEARCH: END-->

<!-- REWORK REASON SEARCH: START-->
<div id=""reworkReasonSearchWindow"" class=""scrapReasonSearchWindow"" hidden=""hidden""> 
    <div class=""row"" style=""text-align: left !important;"">        
        <div class=""col-xs-3""  style=""height: 8vh;"" >
            <div id=""divScrapReason"">  
                <div class=""row"" style=""width: 90% !important;"">          
                    <label class=""control-label control-labell-main"" style=""color: #f3ecec;  margin-right: 10px"">Rework Category : </label>
                    <div class=""k-rewor-reason-dd"" id=""ddlScrapReason""  style=""width:60% height: 40vh; font-size: 18px""></div>  
                </div>  
            </div>  
        </div>   
        <div class=""col-xs-4"">
            <input type=""text"" class=""form-contr");
            WriteLiteral(@"ol"" placeholder=""Enter Rework Reason"" id=""reworkReasonSearchWindowScrapTxt"" style=""width:50%"">
        </div>
    </div>
    <br>    
    <div id=""reworkReasonSearchGrid""></div>
    </div>   
</div>
<!-- REWORK REASON SEARCH: END-->

<!-- DEFECT OPERATION SEARCH WINDOW: START-->
<div id=""defectOppSearchWindow"" class=""scrapReasonSearchWindow"" hidden=""hidden""> 
    <input type=""text"" class=""form-control"" placeholder=""Enter Defect Operation"" id=""defectOppSearchWindowTxt"" style=""width:50%"">            
    <br>           
    <div id=""defectOppSearchGrid"">            
    </div>     
</div>
<!-- DEFECT OPERATION SEARCH WINDOW: END-->

<!-- PO COUNTER POPUP WINDOW: START-->
<div id=""poCounterResetWindow"" class=""scrapReasonSearchWindow"" hidden=""hidden"">
    <!--Added by NimantaH-->
    <div class=""row"" style=""margin-right: 0px !important;"">
        <table style=""width: 100%"" class=""table table-po"">
            <thead>
                <tr>
                    <th style=""text-align: left"" col");
            WriteLiteral(@"span=""2"" class=""th-p"">Bag Barcode Counter</th>
                    <th style=""text-align: right"" class=""th-p"">Counter ID :</th>
                    <th style=""text-align: left""><label id=""CounterID"" class=""th-r""></label></th>
                </tr>
            </thead>
            <tbody>
                <tr hidden=""hidden"">
                    <td style=""text-align: right"" class=""td-p"">Counter Number:</td>
                    <td style=""text-align: left"" colspan=""3"" class=""td-r""><input type=""textarea"" id=""counterNumber"" class=""is-valid form-control-t"" style=""width: 45px; font-size: 30px;"" placeholder=""Enter Counter Number"" style=""width: 60px;""></td>
                </tr>
                <tr>
                    <td style=""text-align: right"" class=""td-p"">Style :</td>
                    <td colspan=""3"" id=""styleTxt"" style=""text-align: left"" class=""td-r""></td>
                </tr>
                <tr>
                    <td style=""text-align: right"" class=""td-p"">Shedule :</td>
                ");
            WriteLiteral(@"    <td colspan=""3"" id=""sheduleTxt"" style=""text-align: left"" class=""td-r""></td>
                </tr>
                <tr>
                    <td style=""text-align: right"" class=""td-p"">PO :</td>
                    <td colspan=""3"" id=""poTxt"" style=""text-align: left"" class=""td-r""></td>
                </tr>
                <tr>
                    <td style=""text-align: right"" class=""td-p"">Z-Feature :</td>
                    <td colspan=""3"" id=""zFeatureTxt"" style=""text-align: left"" class=""td-r""></td>
                </tr>
                <tr>
                    <td style=""text-align: right"" class=""td-p"">Color :</td>
                    <td colspan=""3"" style=""text-align: left"" class=""td-r""><label id=""colorTxt""></td>
                </tr>
                <tr id=""bagbarcode-row"">
                    <td style=""text-align: right"" class=""td-p"">Bag Barcode :</td>
                    <td style=""text-align: left"" colspan=""3"" class=""td-r"">
                        <input type=""textarea"" id=""bagBarcod");
            WriteLiteral(@"eBcodeTxt"" class=""is-valid form-control-t"" placeholder=""Scan bag barcode"" style=""font-size: 30px; width: 305px;"" autofocus>
                    </td>
                </tr>
                <tr id=""bagqty-row"">
                    <td style=""text-align: right"" class=""td-p"">Bag Quantity :</td>
                    <td style=""text-align: left"" colspan=""3"" class=""td-r""><input type=""textarea"" id=""bagSizeTxt"" class=""is-valid form-control-t"" placeholder=""Nos"" style=""width: 60px;""></td>
                </tr>
                <tr>
                    <td style=""text-align: right"" class=""td-p""><label>Current Quantity :</label><label id=""currentQuantityNumber"" hidden=""hidden""></label></td>
                    <td colspan=""3"" id=""currentQuantityTxt"" style=""text-align: left"" class=""td-r""></td>
                </tr>
                <tr>
                    <td style=""text-align: right"" class=""td-p"">WIP :</td>
                    <td colspan=""3"" id=""cutQuantityTxt"" style=""text-align: left"" class=""td-r""></td>
    ");
            WriteLiteral(@"            </tr>
            </tbody>
        </table>
        <table style=""width: 100%"" class=""table table-po"" id=""bagcounter-action-buttons"">
            <tbody>
                <tr>
                    <td colspan=""2"" style=""text-align: center"">
                        <button type=""button"" id=""BAGBtnClear"" class=""m-2 btn btn-danger width-button"" title=""Remove"" style=""font-size: 30px; font-weight: 600;"">
                        <span>Close the Bag</span>
                    </td>
                    <td colspan=""2"" style=""text-align: center"">
                        <button type=""button"" id=""BAGBtnReset"" class=""m-2 btn btn-success width-button"" title=""Done"" style=""font-size: 30px; font-weight: 600;"">
                        <span>Save</span>
                    </td>
                </tr>
                <tr>
                    <td colspan=""2"" style=""text-align: center"">
                        <label Style=""text-align: center;"">බෑගය ඉවත් කිරීමට.</label>
                    </td>
    ");
            WriteLiteral(@"                <td colspan=""2"" style=""text-align: center"">
                        <label Style=""text-align: center;"">බෑග් තීරු කේත විස්තර සුරකින්න.</label>
                    </td>
                </tr>
            </tbody>
        </table>
        <table style=""width: 100%"" class=""table table-po"" id=""pocounter-action-buttons"">
            <tbody>
                <tr>
                    <td colspan=""2"" style=""text-align: center"">
                        <button type=""button"" id=""POBtnClear"" class=""m-2 btn btn-danger width-button"" title=""Remove Counter"" style=""font-size: 30px; font-weight: 600;"">
                        <span>Remove Counter</span>
                    </td>
                    <td colspan=""2"" style=""text-align: center"">
                        <button type=""button"" id=""POBtnReset"" class=""m-2 btn btn-success width-button"" title=""Reset Counter"" style=""font-size: 30px; font-weight: 600;"">
                        <span>Reset Counter</span>
                    </td>
            ");
            WriteLiteral(@"    </tr>
                <tr>
                    <td colspan=""2"" style=""text-align: center"">
                        <label Style=""text-align: center;"">කවුන්ටරය ඉවත් කරන්න.</label>
                    </td>
                    <td colspan=""2"" style=""text-align: center"">
                        <label Style=""text-align: center;"">කවුන්ටරය 0 වෙත නැවත සකසන්න.</label>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<!-- PO COUNTER POPUP WINDOW: END-->

<!--Page Styles: START-->
<Style>
    /* Scroll Bar */
    /* width */
    ::-webkit-scrollbar {
    width: 10px;
    height: 15px;
    margin-bottom: 7px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
    background: #49505700;
    }
    
    /* Handle */
    ::-webkit-scrollbar-thumb {
    background: #888; 
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
    border-bottom-right-radius: 8px;
    border-bottom-left-radius: 8px;
    }

    /* ");
            WriteLiteral("Handle on hover */\r\n    ::-webkit-scrollbar-thumb:hover {\r\n    background: #555; \r\n    }\r\n</Style>\r\n<!--Page Styles: END-->");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
